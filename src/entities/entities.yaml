- name: light
  color: a6a6ff
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - LINEAR: Use a linear falloff. Default is inverse distance squared (more realistic). # OK
  - NOANGLE: Ignore angle attenuation.
  - DARKLIGHT: ''
  - DARKLIGHT: ''
  - NOGRIDLIGHT: Do not affect the lightgrid (dynamic entity lighting).
  props:
    # todo: source/engine/renderer/tr_bsp.cpp:5700
    light_center: '' # todo:
    light_radius: '' # todo:
    light_target: '' # todo:
    light_right: '' # todo:
    light_up: '' # todo:
    light_start: '' # todo:
    light_end: '' # todo:
    light_scale: '' # todo:
    texture: '' # todo:
    rotation: or light_rotation # todo:
    noshadows: only possible value 1 # todo:
    noradiosity: only possible value 1 # todo:
    parallel: only possible value 1 # todo:
    # from q3map2
    _sun: Set this key to 1 on a spotlight to make an infinite sun light.
    _samples: '' # look in q3
    _deviance: ''
    style: If not default, makes wave noise shader causing whole map to blink. Values variate blink function.
    # OK:
    origin: Position.
    light: Intensity.
    _color: Weighted RGB value of light color.
    _filterradius: No attenuation within _filterradius sphere.
    target: Lights pointed at a target will be spotlights.
    radius: overrides the default 64 unit Radius of a spotlight at the target point.
    scale: 'Scales intensity, from SOF2/JK2. Eg. light=300, scale=0.2 will result in light=60'
    fade: Linear (only linear) light attenuation coefficient, less value - far the light goes.
  proptypes:
    light: float
    _color: vec3_float
    fade: float
    style: int
    scale: float
    _filterradius: float
    _deviance: float
    _samples: int
    radius: float
  propdefaults:
    light: 300
    _color: [1, 1, 1]
    fade: 1
    style: 0
    scale: 1
    _filterradius: 0
    _deviance: 0
    _samples: 1
    radius: 64
  desc: Non-displayed point light source. The -pointscale and -scale arguments to
    Q3Map2 affect the brightness of these lights. The -skyscale argument affects brightness
    of entity sun lights.
  specials: {}
- name: lightJunior
  color: 00b34c
  size_min: [-6.0, -6.0, -6.0]
  size_max: [6.0, 6.0, 6.0]
  flags:
  - LINEAR: Use a linear falloff. Default is inverse distance squared (more realistic).
  - NOANGLE: Ignore angle attenuation.
  - UNUSED1: ''
  - UNUSED2: ''
  - NOGRIDLIGHT: Do not affect the lightgrid (dynamic entity lighting). Setting this
      spawnflag will disable this light entirely.
  props:
    _color: weighted RGB value of light color (default white - 1.0 1.0 1.0).
    _light OR light: overrides the default 300 intensity.
    _sun: Set this key to 1 on a spotlight to make an infinite sun light.
    fade: Fades light attenuation. Only affects linear lights.
    radius: overrides the default 64 unit radius of a spotlight at the target point.
    scale: Scales light attentation, from SOF2/JK2. Scales the "light" value.
    target: Lights pointed at a target will be spotlights.
  desc: Non-displayed point light source THAT ONLY AFFECTS ENTITIES (lightgrid). The
    -pointscale and -scale arguments to Q3Map2 affect the brightness of these lights.
    The -skyscale argument affects brightness of entity sun lights.
  specials: {}
- name: func_bobbing
  color: 007fcc
  flags:
  - X_AXIS: entity will bob along the X axis. (overrides Y_AXIS)
  - Y_AXIS: entity will bob along the Y axis. (if both not set - it will Z axis.)
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    _targetname: Used to attach a misc_model entity to this entity.
    color: constantLight color of .md3 model included with entity. Has no effect on
      the entity's brushes (default 1 1 1).
    height: sets the amount of travel of the oscillation movement (default 32).
    light: constantLight radius of .md3 model included with entity. Has no effect
      on the entity's brushes (default 0).
    model2: 'path/name of model to include (eg: models/mapobjects/jets/jets01.md3).'
    noise: path/name of .wav file to play. Use looping sounds only (eg. sound/world/drone6.wav
      - See Notes).
    origin: alternate method of setting XYZ origin of sound and .md3 model included
      with entity (See Notes).
    phase: sets the start offset of the oscillation cycle. Values must be 0 < phase
      < 1. Any integer phase value is the same as no offset (default 0).
    speed: amount of time in seconds for one complete oscillation cycle (default 4).
  desc: 'Solid entity that oscillates back and forth in a linear motion. By default,
    it will have an amount of displacement in either direction equal to the dimension
    of the brush in the axis in which it''s bobbing. Entity bobs on the Z axis (up-down)
    by default. It can also emit sound if the "noise" key is set. Will crush the player
    when blocked.

    In order for the sound to be emitted from the entity, it is recommended to include
    a brush with an origin shader at its center, otherwise the sound will not follow
    the entity as it moves. Setting the origin key is simply an alternate method to
    using an origin brush. When using the model2 key, the origin point of the model
    will correspond to the origin point defined by either the origin brush or the
    origin coordinate value.


    Target this entity with a misc_model to have the model attached to the entity
    (set the model''s "target" key to the same value as this entity''s "targetname").'
  specials: {}
- name: func_button
  color: 007fcc
  flags: []
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    _targetname: Used to attach a misc_model entity to this entity.
    color: constantLight color of .md3 model included with entity. Has no effect on
      the entity's brushes (default 1 1 1).
    light: constantLight radius of .md3 model included with entity. Has no effect
      on the entity's brushes (default 0).
    model2: 'path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3).'
    origin: ''
    sound1to2: the sound played when the door, platform or button moves from state
      1 to state 2.
    # OK:
    target: All entities with a matching targetname will be triggered. If not set
      button will not appear.
    wait: &brush_wait Number of seconds before brush returns. -1 = return immediately.
    speed: &brush_speed Determines how fast the brush moves.
    lip: &brush_lip When 0, brush displacement = brush's size in direction of movement.
      Positive lip value discreases displacement, leaving lip remaining at the end of move.
    angle: &brush_angle 'Determines moving direction of brush (0..360 - around Z axis:
      0=+x, 90=+y, 180=-x, 270=-y; special values: up = -1, down = -2).'
    health: &brush_health If set to any non-zero value, the brush must take damage (any
      amount) to activate.
  propreplace:
    speed: &Rbutt {brush: button}
    lip: *Rbutt
    angle: *Rbutt
    health: *Rbutt
    wait: {'before brush returns': 'button stays pressed'}
  proptypes:
    lip: float
  propdefaults:
    lip: 4
    health: false
  boolvalues:
    health: [0, 1]
  desc: 'When a button is touched by a player, it moves in the direction set by the
    "angle" key, triggers all its targets, stays pressed by an amount of time set
    by the "wait" key, then returns to it''s original position where it can be operated
    again.

    Setting the origin key is simply an alternate method to using an origin brush.
    When using the model2 key, the origin point of the model will correspond to the
    origin point defined by either the origin brush or the origin coordinate value.

    Target this entity with a misc_model to have the model attached to the entity
    (set the model''s "target" key to the same value as this entity''s "targetname").'
  specials: {}
- name: func_destructable
  flags: []
  color: 007fcc
  props:
    model: '' # todo:
    origin: '' # todo:
    angles: '' # todo:
    # OK:
    health: Amount of damage needed to destroy this.
    damage: Splash damage. # todo: additionally check, dmg or damage
    radius: Splash radius.
  proptypes:
    damage: int
    radius: int
  propdefaults:
    damage: 0
    radius: 0
    health: 100
  desc: 'Destructable object.'
  specials: {}
- name: func_door
  color: 007fcc
  flags: # ALL OK
  - START_OPEN: The door will spawn in the open state and operate in reverse.
  - '-': ''
  - CRUSHER: Door will not reverse direction when blocked and will keep damaging player
      or building until it dies or gets out of the way.
    # bug: when CRUSHER is off, door blocked, goes back for 1 frame, then goes forward
    # again, etc, crushing everything while player in triggering zone
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    _targetname: Used to attach a misc_model entity to this entity.
    color: constantLight color of .md3 model included with entity. Has no effect on
      the entity's brushes (default 1 1 1).
    light: constantLight radius of .md3 model included with entity. Has no effect
      on the entity's brushes (default 0).
    model2: 'path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3).'
    origin: alternate method of setting XYZ origin of .md3 model included with entity
      (See Notes).
    sound1to2: the sound played when the door, platform or button moves from state
      1 to state 2.
    sound2to1: the sound played when the door or platform moves from from state 2
      to state 1.
    soundPos1: the sound played when the door or platform reaches state 1.
    soundPos2: the sound played when the door or platform reaches state 2.
    # OK:
    targetname: If set, a func_button or trigger is required to activate the door.
      Overrides activation by damage.
    speed: *brush_speed
    lip: *brush_lip
    angle: *brush_angle
    wait: *brush_wait
      # bug: bad -1 value, it makes annoying sound cascade (opens/closes every frame)
      # bug: confusing 0 (stands for default value)
    range: Door triggering range.
    dmg: Damage to inflict on player when he blocks operation of door.
      Door will reverse direction when blocked unless CRUSHER spawnflag is set.
    health: *brush_health
    team: Assign the same team name to multiple doors that should operate together.
  propreplace:
    speed: &Rdoor {brush: door}
    lip: *Rdoor
    angle: *Rdoor
    health: *Rdoor
  proptypes:
    range: int
    lip: float
  propdefaults:
    health: false
    range: 72
    lip: 8
    speed: 400
    dmg: 2
  boolvalues:
    health: [0, 1]
  desc: 'Normal sliding door entity. By default, the door will activate when player
    walks close (range) to it or when damage is inflicted (health) to it.

    Unlike in Quake 2, doors that touch are NOT automatically teamed. If you want
    doors to operate together, you have to team them manually by assigning the same
    team name to all of them. Setting the origin key is simply an alternate method
    to using an origin brush. When using the model2 key, the origin point of the model
    will correspond to the origin point defined by either the origin brush or the
    origin coordinate value.

    Target this entity with a misc_model to have the model attached to the entity
    (set the model''s "target" key to the same value as this entity''s "targetname").'
  specials: {}
- name: func_door_model
  color: 007fcc
  flags: []
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    _targetname: Used to attach a misc_model entity to this entity.
    animation: The first frame and number of frames in the door open animation (e.g.
      0 10). This will be reversed for the close animation.
    color: constantLight color of .md3 model included with entity. Has no effect on
      the entity's brushes (default 1 1 1).
    health: (default 0) if set to any non-zero value, the door must take damage (any
      amount) to activate.
    light: constantLight radius of .md3 model included with entity. Has no effect
      on the entity's brushes (default 0).
    model2: 'path/name of the door model (eg: models/mapobjects/pipe/pipe02.md3).'
    modelOrigin: means of setting the origin of the model.
    scale: scale the model in each of the major axes (e.g. 1.0 1.0 2.0 -- twice as
      high as normal).
    sound1to2: the sound played when the door, platform or button moves from state
      1 to state 2.
    sound2to1: the sound played when the door or platform moves from from state 2
      to state 1.
    soundPos1: the sound played when the door or platform reaches state 1.
    soundPos2: the sound played when the door or platform reaches state 2.
    speed: determines the time taken for the door to change state in msec (default
      200).
    targetname: if set, a func_button or trigger is required to activate the door.
    team: assign the same team name to multiple doors that should operate together
      (see Notes).
    wait: number of seconds before door returns (default 2)
  desc: 'A model based door entity. By default, the door will activate when player
    walks close to it. The opening and closing of the door is provided by an animation
    in the model itself.


    Every func_door_model needs its model to be positioned, scaled and orientated
    using the modelOrigin, scale and angle/angles keys repsectively.'
  specials: {}
- name: func_door_rotating
  color: 007fcc
  flags:
  - START_OPEN: the door will spawn in the open state and operate in reverse.
  - '-': ''
  - CRUSHER: door will not reverse direction when blocked and will keep damaging player
      until he dies or gets out of the way.
  - REVERSE: the door will open the other way.
  - '-': ''
  - X_AXIS: rotate on the X axis instead of the Z.
  - Y_AXIS: rotate on the Y axis instead of the Z.
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    _targetname: Used to attach a misc_model entity to this entity.
    color: constantLight color of .md3 model included with entity. Has no effect on
      the entity's brushes (default 1 1 1).
    dmg: damage to inflict on player when he blocks operation of door (default 4).
      Door will reverse direction when blocked unless CRUSHER spawnflag is set.
    health: (default 0) if set to any non-zero value, the door must take damage (any
      amount) to activate.
    light: constantLight radius of .md3 model included with entity. Has no effect
      on the entity's brushes (default 0).
    model2: 'path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3).'
    origin: alternate method of setting XYZ origin of .md3 model included with entity
      (See Notes).
    rotatorAngle: the number of degrees through which to rotate (default 90).
    sound1to2: the sound played when the door, platform or button moves from state
      1 to state 2.
    sound2to1: the sound played when the door or platform moves from from state 2
      to state 1.
    soundPos1: the sound played when the door or platform reaches state 1.
    soundPos2: the sound played when the door or platform reaches state 2.
    speed: determines how fast the door moves (in degrees/second).
    targetname: if set, a func_button or trigger is required to activate the door.
    team: assign the same team name to multiple doors that should operate together
      (see Notes).
    wait: number of seconds before door returns (default 2)
  desc: 'Rotating door entity. By default, the door will activate when player walks
    close to it.

    Unlike in Quake 2, doors that touch are NOT automatically teamed. If you want
    doors to operate together, you have to team them manually by assigning the same
    team name to all of them. Setting the origin key is simply an alternate method
    to using an origin brush. When using the model2 key, the origin point of the model
    will correspond to the origin point defined by either the origin brush or the
    origin coordinate value.


    Target this entity with a misc_model to have the model attached to the entity
    (set the model''s "target" key to the same value as this entity''s "targetname").


    You need to have an origin brush as part of this entity.  The center of that brush
    will be the point around which it is rotated. It will rotate around the Z axis
    by default.  You can check either the X_AXIS or Y_AXIS box to change that.'
  specials: {}
- name: func_dynamic
  color: 007fcc
  flags: []
  props: {}
  desc: ''
  specials: {}
- name: func_group
  color: 007fcc
  flags: []
  props:
    '-------- OLD TERRAIN KEYS (note': obsolete with Q3Map2) --------
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    alphamap: this is the path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    layers: this integer value is the number unique root shaders that will be use
      on the terrain.
    shader: this is the path to the metashader used to assign textures to the terrain
      entity.
    terrain: 'this is an on/off flag. When set to 1, the entity becomes a terrain
      entity. Note: unecessary when compiling with Q3Map2. See Q3Map2 keys.'
  desc: 'This is not an entity as such. It is strictly an editor utility to group
    world brushes and patches together for convenience (selecting, moving, copying,
    etc). You cannot group entities with this.

    The TAB key can be used to flip through the component pieces of a selected func_group
    entity, isolating individual components. To make a func_group into a terrain entity,
    refer to the Terrain Construction documentation.'
  specials: {}
- name: func_pendulum
  color: 007fcc
  flags: []
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    _targetname: Used to attach a misc_model entity to this entity.
    angle: angle offset of axis of rotation from default X axis (default 0).
    color: constantLight color of .md3 model included with entity. Has no effect on
      the entity's brushes (default 1 1 1).
    light: constantLight radius of .md3 model included with entity. Has no effect
      on the entity's brushes (default 0).
    model2: 'path/name of model to include (eg: models/mapobjects/jets/jets01.md3).'
    noise: path/name of .wav file to play. Use looping sounds only (eg. sound/world/drone6.wav).
    speed: angle of swing arc in either direction from initial position (default 30).
    # found:
    phase: sets the start offset of the swinging cycle. Values must be 0 < phase <
      1. Any integer phase value is the same as no offset (default 0).
    dmg: ''
    origin: alternate method of setting XYZ origin of entity's rotation axis and .md3
      model included with entity (default "0 0 0" - See Notes).
    angles: ''
  proptypes:
    phase: float
  propdefaults:
    phase: 0
    dmg: 2
  desc: 'Solid entity that describes a pendulum back and forth rotation movement. Rotates
    on the X axis by default. Pendulum frequency is a physical constant based on the
    length of the beam and gravity. Blocking the pendulum instantly kills a player.

    You need to have an origin brush as part of this entity. The center of that
    brush will be the point through which the rotation axis passes. Setting the
    origin key is simply an alternate method to using an origin brush. Pendulum
    will rotate along the X axis by default. Very crude operation
    pendulum cannot rotate along Z axis, the speed of swing (frequency) is not
    adjustable. When using the model2 key, the origin point of the model will correspond
    to the origin point defined by either the origin brush or the origin coordinate
    value.

    Target this entity with a misc_model to have the model attached to the entity
    (set the model''s "target" key to the same value as this entity''s "targetname").'
  specials: {}
- name: func_plat
  color: 007fcc
  flags:
  - DONT_WAIT: The platform will not wait for a client to leave before returning to
      its original position.
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    _targetname: Used to attach a misc_model entity to this entity.
    color: constantLight color of .md3 model included with entity. Has no effect on
      the entity's brushes (default 1 1 1).
    dmg: damage to inflict on player when he blocks operation of plat (default 4).
      Plat will reverse direction when blocked.
    height: if set, this will determine the total amount of vertical travel of the
      plat.
    light: constantLight radius of .md3 model included with entity. Has no effect
      on the entity's brushes (default 0).
    lip: lip remaining at end of move (default 16). Has no effect if "height" is set.
    model2: 'path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3).'
    origin: alternate method of setting XYZ origin of .md3 model included with entity
      (See Notes).
    sound1to2: the sound played when the door, platform or button moves from state
      1 to state 2.
    sound2to1: the sound played when the door or platform moves from from state 2
      to state 1.
    soundPos1: the sound played when the door or platform reaches state 1.
    soundPos2: the sound played when the door or platform reaches state 2.
    speed: determines how fast the plat moves (default 150).
    targetname: if set, the trigger that points to this will raise the plat each time
      it fires. The plat raises and comes back down a second later if no player is
      on it.
  desc: 'Rising platform the player can ride to reach higher places. Plats must always
    be drawn in the raised position, so they will operate and be lighted correctly
    but they spawn in the lowered position. The plat will stay in the raised position
    until the player steps off. There are no proper sounds for this entity, only beep
    noises. It will spawn in the game and work properly but it sounds silly (see Notes).

    By default, the total amount of vertical travel of a platform is implicitly determined
    by the overall vertical size of the brushes of which it''s made minus the lip
    value. But if the "height" key is used, then the total amount of vertical travel
    of the plat will be exactly that value regardless of the shape and size of the
    plat and regardless of the value of the "lip" key. Using the "height" key is the
    best method for any kind of platforms and the only possible one for thin plats
    which need to travel vertical distances many times their own thickness. Setting
    the origin key is simply an alternate method to using an origin brush. When using
    the model2 key, the origin point of the model will correspond to the origin point
    defined by either the origin brush or the origin coordinate value.


    There is a way to make plats play proper sounds. Just create a sound\movers\plats
    folder under baseq3 and put 2 sounds named pt1_strt.wav and pt1_end.wav in it.
    Those can be the renamed sounds from the Q2 plats or renamed copies of the sound\movers\doors
    sounds you can extract from your pak0.pk3 file or new custom sounds if you''re
    up to it. Thanks to Fragzilla for the tip.


    Target this entity with a misc_model to have the model attached to the entity
    (set the model''s "target" key to the same value as this entity''s "targetname").'
  specials: {}
- name: func_rotating
  color: 007fcc
  flags:
  - '-': ''
  - '-': ''
  - X_AXIS: entity will rotate along the X axis.
  - Y_AXIS: entity will rotate along the Y axis.
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    _targetname: Used to attach a misc_model entity to this entity.
    color: constantLight color of .md3 model included with entity. Has no effect on
      the entity's brushes (default 1 1 1).
    light: constantLight radius of .md3 model included with entity. Has no effect
      on the entity's brushes (default 0).
    model2: 'path/name of model to include (eg: models/mapobjects/bitch/fembotbig.md3).'
    noise: path/name of .wav file to play. Use looping sounds only (eg. sound/world/drone6.wav).
    origin: alternate method of setting XYZ origin of entity's rotation axis and .md3
      model included with entity (default "0 0 0" - See Notes).
    speed: determines how fast entity rotates (default 100).
  desc: 'Solid entity that rotates continuously. Rotates on the Z axis by default
    and requires an origin brush. It will always start on in the game and is not targetable.

    You need to have an origin brush as part of this entity. The center of that brush
    will be the point through which the rotation axis passes. Setting the origin key
    is simply an alternate method to using an origin brush. It will rotate along the
    Z axis by default. You can check either the X_AXIS or Y_AXIS box to change that.
    When using the model2 key, the origin point of the model will correspond to the
    origin point defined by either the origin brush or the origin coordinate value.


    Target this entity with a misc_model to have the model attached to the entity
    (set the model''s "target" key to the same value as this entity''s "targetname").'
  specials: {}
- name: func_spawn # todo:
  color: '007fcc'
  flags:
  - INITIALLY_LINKED: ''
  - DONT_KILL_BRUSH_MODEL_ON_ACT: ''
  props:
    angles: ''
    model: ''
  desc: ''
  specials: {}
- name: func_static
  color: 007fcc
  flags: []
  props:
    ? When using the model2 key, the origin point of the model will correspond to
      the origin point defined by either the origin brush or the origin coordinate
      value. If a model is included with a targeted func_static, the brush(es) of
      the entity will be removed from the game but the .md3 model won't
    : 'it will automatically be moved to the (0 0 0) world origin so you should NOT
      include an .md3 model to a targeted func_static.


      Target this entity with a misc_model to have the model attached to the entity
      (set the model''s "target" key to the same value as this entity''s "targetname").'
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    _targetname: Used to attach a misc_model entity to this entity.
    color: constantLight color of .md3 model included with entity. Has no effect on
      the entity's brushes (default 1 1 1).
    light: constantLight radius of .md3 model included with entity. Has no effect
      on the entity's brushes (default 0).
    model2: 'path/name of model to include (eg: models/mapobjects/bitch/fembotbig.md3).'
    origin: alternate method of setting XYZ origin of .md3 model included with entity
      (See Notes).
    targetname: NOT SUPPORTED BY RENDERER - if set, a func_button or trigger can make
      entity disappear from the game (See Notes).
  desc: Static non-solid bspmodel. Can be used for conditional walls and models.
  specials: {}
- name: func_timer
  color: 007fcc
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - START_ON: Timer will start on in the game and continuously fire its targets. # OK
  props:
    # OK:
    wait: Delay in seconds between each triggering of its targets.
    target: This points to the entities to trigger.
    targetname: A func_button or trigger that points to this will toggle the timer
      on/off when activated.
  desc: 'Time delay trigger that will continuously fire its targets after a preset
    time delay. The time delay can also be randomized. When triggered, the timer will
    toggle on/off.

    When the random key is set, its value is used to calculate a minimum and a maximum
    delay. The final time delay will be a random value anywhere between the minimum
    and maximum values (min delay = wait - random) (max delay = wait + random).'
  specials: {}
- name: func_train
  color: 007fcc
  flags:
  - START_OFF: the train will spawn in the off state
  - BLOCK_STOPS: with this set a train simply stops if blocked, instead of killing.
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    _targetname: Used to attach a misc_model entity to this entity.
    color: constantLight color of .md3 model included with entity. Has no effect on
      the entity's brushes (default 1 1 1).
    light: constantLight radius of .md3 model included with entity. Has no effect
      on the entity's brushes (default 0).
    model2: 'path/name of model to include (eg: models/mapobjects/pipe/pipe02.md3).'
    origin: alternate method of setting XYZ origin of the train's brush(es) and .md3
      model included with entity (See Notes).
    speed: speed of displacement of train (default 100 or overridden by speed value
      of path).
    target: this points to the first path_corner of the path which is also the spawn
      location of the train's origin.
  desc: 'Trains are moving solids that follow a string of path_corner entities. Trains
    in Tremulous are less basic than in Q3A, they also require an origin brush (see
    Notes).

    1. Trains instakill anything in their path by default.

    2. Trains cannot emit sound.

    3. When BLOCK_STOPS is set, trains cannot be stopped just by getting in their
    way, the player must be wedged between the train and another obstacle to block
    it.


    Setting the origin key is simply an alternate method to using an origin brush.
    When using the model2 key, the origin point of the model will correspond to the
    origin point defined by either the origin brush or the origin coordinate value.


    Target this entity with a misc_model to have the model attached to the entity
    (set the model''s "target" key to the same value as this entity''s "targetname").'
  specials: {}
- name: info_notnull
  color: 007f00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    targetname: must match the target key of entity that uses this for pointing.
  desc: Used as a positional target for entities that can use directional pointing.
    A target_position can be used instead of this but was kept in Q3A for legacy purposes.
  specials: {}
- name: info_null
  color: 007f00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    targetname: must match the target key of entity that uses this for pointing.
  desc: Used as a positional target for light entities to create a spotlight effect.
    A target_position can be used instead of this but was kept in Q3A for legacy purposes.
  specials: {}
- name: info_player_intermission
  color: ff00ff
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    angles: alternate "pitch, yaw, roll" angles method of aiming intermission camera
      (default 0 0 0).
    target: point this to an info_notnull or target_position entity to set the camera's
      pointing angles.
  desc: Camera for intermission screen between matches. Can be aimed by setting the
    "angles" key or targeting an pointing to an aiming entity. Use only one per level.
  specials: {}
- name: info_alien_intermission
  color: ff00ff
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    angles: alternate "pitch, yaw, roll" angles method of aiming intermission camera
      (default 0 0 0).
    target: point this to an info_notnull or target_position entity to set the camera's
      pointing angles.
  desc: Camera for aliens before they spawn. Can be aimed by setting the "angles"
    key or targeting an pointing to an aiming entity. Use one per level.
  specials: {}
- name: info_human_intermission
  color: ff00ff
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    angles: alternate "pitch, yaw, roll" angles method of aiming intermission camera
      (default 0 0 0).
    target: point this to an info_notnull or target_position entity to set the camera's
      pointing angles.
  desc: Camera for humans before they spawn. Can be aimed by setting the "angles"
    key or targeting an pointing to an aiming entity. Use one per level.
  specials: {}
- name: misc_model
  color: ff7f3f
  size_min: [-16.0, -16.0, -16.0]
  size_max: [16.0, 16.0, 16.0]
  flags:
  - CASTSHADOW: Toggles the model casting shadows on the map surfaces.
  - AUtOCLIP: ''
  - FORCEMETA: Sets the forcemeta spawnflag, automatically adding q3map_forcemeta
      to any shaders used by the model (which, in turn, allows the model to become
      lightmapped). This, effectively, is the "lightmapped model" spawnflag.
  props:
    AUTOCLIP: Sets the autoclipping spawnflag, automatically assigning q3map_clipmodel
      to any shaders used by the model. Use of Q3Map2 autoclipping for models is only
      recommended for large models with relatively few triangles in their mesh (i.e.
      terrain). The Q3Map2 autoclipping algorithm is a bit of a hack, and can hurt
      in-game performance (as well as produce erroneous clipping results) when used
      on small, dense models.
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on this
      model (if model is using lightmapped shaders) (default 1.0).
    _remap: Used to remap textures/shaders in the model. To remap all shaders to a
      given shader, use "*;models/mymodel/mytexture". To remap a specific shader,
      use "models/mymodel/old;models/mymodel/new".
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    angle: direction in which model will be oriented.
    angles: Individual control of PITCH, YAW, and ROLL (default 0 0 0).
    model: 'path/name of model to use (eg: models/mapobjects/teleporter/teleporter.md3).'
    modelscale: Floating-point value used to scale a model up or down (default 1.0).
    modelscale_vec: Floating-point vector used to scale a model's axes individually
      (default 1.0 1.0 1.0).
    target: Used to attach the misc_model to a brush entity, where its "targetname"
      key is the same value.
  desc: Generic placeholder for inserting MD3 models in game. Requires compilation
    of map geometry to be added to level. If the map is compiled with Q3Map2, then
    ASE, 3DS, OBJ and other model formats are supported.
  specials: {}
- name: misc_anim_model
  color: ff7f3f
  size_min: [-16.0, -16.0, -16.0]
  size_max: [16.0, 16.0, 16.0]
  flags:
  - TRIGGER_TOGGLE: With this set triggering the entity disables the model altogether
      as opposed to the regular behaviour of toggling the animation.
  props:
    angle: direction in which model will be oriented.
    animation: The guts of the entity. This is identical to an entry in an animation.cfg
      - Start Frame, Number of frames, Looping Frames, Frame rate. For example 0 30
      30 20 will play frames 0 through 30 continously at 20 fps.
    model: 'path/name of model to use (eg: models/mapobjects/teleporter/teleporter.md3).'
    radius: The scale of the model compared to its original size. Defaults to 1.0.
  desc: A little like misc_model except that it is a game entity and does not become
    part of the map geometry. An instance of this entity will draw an arbituary md3
    in the world with an arbituary frame or with an animation.
  specials: {}
- name: misc_particle_system
  color: ff7f3f
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - SPAWN_DISABLED: Spawn disabled.
  props:
    psName: The name of the particle system to spawn at this entity.
  desc: 'A particle system entity.

    Triggering this entity toggles it on and off.'
  specials: {}
- name: misc_light_flare
  color: a6a6ff
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - SPAWN_DISABLED: Spawn disabled.
  props:
    angles: This reflects which direction the flare points. It is not important unless
      the second component of the radius key is employed. angles is a vector of PITCH
      YAW ROLL. For example a value of "90 0 0" would create a flare pointing down.
      ROLL is redundant in this context and can be set arbitrarily.
    radius: 'The radius key is a vector.

      The first component is the size of the light flare. The radius is calculated
      by taking the distance of the viewer from the light flare and dividing by this
      key, so the larger the key value, the smaller the flare. Values between 2 and
      10 are sensible.

      The second component indicates the angle around the direction the flare points
      for which it is visible. For example a value of 90 means that you can see the
      flare while infront of the entity, but not when behind it. If set to zero the
      light flare will be visible from any angle

      The third component is similar to the first except that it specifies the size
      of the light source rather than the size of the light flare itself. This is
      useful when the higher detail flare fading modes are enabled. If this is set
      to the same value as the first component, fading will commence as soon as the
      edge of the light flare is occluded by some surface between the viewer and the
      flare. If it is set larger the flare will overlap the occluding surface before
      it begins to fade.'
    targetShaderName: The name of the shader of the light flare.
  desc: 'A light flare entity.

    Triggering this entity toggles it.'
  specials: {}
- name: misc_portal_camera
  color: ff7f3f
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - SLOWROTATE: makes the portal camera rotate slowly along the roll axis.
  - FASTROTATE: makes the portal camera rotate faster along the roll axis.
  props:
    angles: this sets the pitch and yaw aiming angles of the portal camera (default
      0 0). Use "roll" key to set roll angle.
    roll: roll angle of camera. A value of 0 is upside down and 180 is the same as
      the player's view.
    target: point this to a target_position entity to set the camera's pointing direction.
    targetname: a misc_portal_surface portal surface indicator must point to this.
  desc: 'Portal camera. This camera is used to project its view onto a portal surface
    in the level through the intermediary of a misc_portal_surface entity. Use the
    "angles" key or target a target_position or info_notnull entity to set the camera''s
    pointing direction.

    Both the setting "angles" key or "targeting a target_position" methods can be
    used to aim the camera. However, the target_position method is simpler. In both
    cases, the "roll" key must be used to set the roll angle. If either the SLOWROTATE
    or FASTROTATE spawnflag is set, then the "roll" value is irrelevant.'
  specials: {}
- name: misc_portal_surface
  color: ff7f3f
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    target: point this to a misc_portal_camera that "sees" the view you want to display
      on the portal.
  desc: 'Portal surface indicator. This will "lock on" the brush face closest to it
    and identify as a portal. The view displayed on the portal surface is the view
    of the misc_portal_camera that this entity targets. Also used for mirrors (see
    Notes).

    The entity must be no farther than 64 units away from the portal surface to lock
    onto it. To make a mirror, apply the common/mirror shader to the surface, place
    this entity near it but don''t target a misc_portal_camera.'
  specials: {}
- name: misc_teleporter_dest
  color: ff7f3f
  size_min: [-32.0, -32.0, -24.0]
  size_max: [32.0, 32.0, -16.0]
  flags: []
  props:
    angle: direction in which player will look when teleported.
    targetname: make the trigger_teleporter point to this.
  desc: Teleport destination location point for trigger_teleporter entities.
  specials: {}
- name: path_corner
  color: 7f4c00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    speed: speed of func_train while moving to the next path corner. This will override
      the speed value of the train.
    target: point to next path_corner in the path.
    targetname: the train following the path or the previous path_corner in the path
      points to this.
    wait: number of seconds func_train will pause on path corner before moving to
      next path corner (default 0 - see Notes).
  desc: 'Path corner entity that func_trains can be made to follow.

    Setting the wait key to -1 will not make the train stop on the path corner, it
    will simply default to 0.'
  specials: {}
- name: target_rumble
  color: ff0000
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    count: 'duration of the quake (default: 10)'
    speed: 'severity of the quake (default: 100)'
  desc: When triggered, this initiates a level-wide rumble effect. All players are
    affected.
  specials: {}
- name: target_delay
  color: 00b3b3
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    ? When the random key is set, its value is used to calculate a minimum and a maximum
      delay. The final time delay will be a random value anywhere between the minimum
      and maximum values
    : (min delay = wait - random) (max delay = wait + random).
    delay: same as wait? replaces it? WTF?...I'm confused now.
    random: random time variance in seconds added or subtracted from "wait" delay
      (default 0 - see Notes).
    target: this points to entities to activate when this entity is triggered.
    targetname: activating trigger points to this.
    wait: delay in seconds from when this gets triggered to when it fires its own
      targets (default approx. 1).
  desc: Time delay trigger intermediary. Like a target_relay, this can only be fired
    by other triggers which will cause it in turn to fire its own targets.
  specials: {}
- name: target_kill
  color: 007f00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    targetname: the activating trigger points to this.
  desc: This will kill the player who activates the trigger that fires this target.
  specials: {}
- name: target_location
  color: 007f00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    '0': white (default)
    '1': red
    '2': green
    '3': yellow
    '4': blue
    '5': cyan
    '6': magenta
    '7': white
    count: color of the location text displayed in parentheses during team chat. Set
      to 0-7 for color.
    message: name of the location (text string). Displayed in parentheses in front
      of all team chat and order messages.
  desc: Location marker used for team chats. The closest target_location in sight
    is used for the location. If none is in sight, the closest in distance is used.
  specials: {}
- name: target_position # todo: game advices to use pos_target instead
  color: 007f00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    # OK:
    targetname: Name of this position.
  desc: 'Aiming target for entities like light, misc_portal_camera and trigger_push
    (jump pads) in particular.

    To make a jump pad, place this entity at the highest point of the jump and target
    it with a trigger_push entity.'
  specials: {}
- name: target_print
  color: 007f00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - HUMAN_TEAM: only the human team players will see the message.
  - ALIEN_TEAM: only the alien team players will see the message.
  - PRIVATE: only the player that activates the target will see the message.
  props:
    message: text string to print on screen.
    targetname: the activating trigger points to this.
  desc: This will print a message on the center of the screen when triggered. By default,
    all the clients will see the message.
  specials: {}
- name: target_push
  color: 7f7f7f
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - BOUNCEPAD: if set, trigger will play bounce noise instead of beep noise when activated
      (recommended).
  - NOSOUND: if set, no sound is played at all
  props:
    angles: this sets the pitch and yaw aiming angles of push entity (default 0 0).
      The roll angle does not apply.
    speed: speed of push (default 1000). Has no effect if entity targets an aiming
      entity.
    target: this points to the aiming entity to which the player will jump.
    targetname: the activating trigger points to this. Push originates from the location
      of the trigger.
  desc: 'This can be used to create jump pads and launch ramps. The direction of push
    can be set by the "angles" key or pointing to a target_position or info_notnull
    entity. Unlike trigger_push, this is NOT client side predicted and must be activated
    by a trigger.

    To make a jump pad or launch ramp, create a trigger_multiple where the jump must
    originate. Place the target_push directly above the trigger_multiple and place
    the target_position entity at the highest point of the jump. Target the trigger_multiple
    to the target_push and target the target_push to the target_position/info_notnull
    (or set the target_push''s "angles" key). Note that the "angle" key also works.'
  specials: {}
- name: target_relay
  color: 00b3b3
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - HUMAN_ONLY: only human team players can activate trigger.
  - ALIEN_ONLY: only alien team players can activate trigger.
  - RANDOM: one one of the targeted entities will be triggered at random.
  props:
    target: this points to entities to activate when this entity is triggered.
    targetname: activating trigger points to this.
  desc: This can only be activated by other triggers which will cause it in turn to
    activate its own targets.
  specials: {}
- name: target_score
  color: 007f00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    count: number of frag points to give to player (default 1).
    targetname: ativating entity points to this.
  desc: This is used to automatically give frag points to the player who activates
    this. A spawn location entity like info_player_* or CTF respawn points can target
    this entity to give points to the player when he spawns in the game. Or a trigger
    can also be used to activate this. The activator of the trigger will get the points.
  specials: {}
- name: target_speaker
  color: 00b3b3
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - LOOPED_ON: sound will loop and initially start on in level (will toggle on/off
      when triggered).
  - LOOPED_OFF: sound will loop and initially start off in level (will toggle on/off
      when triggered).
  - GLOBAL: sound will play full volume throughout the level.
  - ACTIVATOR: sound will play only for the player that activated the target.
  props:
    ? The combination of the "wait" and "random" keys can be used to play non-looping
      sounds without requiring an activating trigger but both keys must be used together.
      The value of the "random" key is used to calculate a minimum and a maximum delay.
      The final time delay will be a random value anywhere between the minimum and
      maximum values
    : (min delay = wait - random) (max delay = wait + random).
    noise: path/name of .wav file to play (eg. sound/world/growl1.wav - see Notes).
    random: random time variance in seconds added or subtracted from "wait" delay
      ("wait" key must be set - see Notes).
    targetname: the activating button or trigger points to this.
    wait: delay in seconds between each time the sound is played ("random" key must
      be set - see Notes).
  desc: 'Sound generating entity that plays .wav files. Normal non-looping sounds
    play each time the target_speaker is triggered. Looping sounds can be set to play
    by themselves (no activating trigger) or be toggled on/off by a trigger.

    The path portion value of the "noise" key can be replaced by the implicit folder
    character "*" for triggered sounds that belong to a particular player model. For
    example, if you want to create a "bottomless pit" in which the player screams
    and dies when he falls into, you would place a trigger_multiple over the floor
    of the pit and target a target_speaker with it. Then, you would set the "noise"
    key to "*falling1.wav". The * character means the current player model''s sound
    folder. So if your current player model is Visor, * = sound/player/visor, if your
    current player model is Sarge, * = sound/player/sarge, etc. This cool feature
    provides an excellent way to create "player-specific" triggered sounds in your
    levels.'
  specials: {}
- name: target_teleporter
  color: 007f00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    target: this must point to a misc_teleporter_dest entity.
    targetname: activating trigger points to this.
  desc: Activating this will teleport players to the location of the targeted misc_teleporter_dest
    entity. Unlike trigger_teleport, this entity must be activated by a trigger and
    does NOT allow client prediction of events.
  specials: {}
- name: target_alien_win
  color: ff0000
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props: {}
  desc: When triggered, this causes an unconditional win for the alien team.
  specials: {}
- name: target_human_win
  color: ff0000
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props: {}
  desc: When triggered, this causes an unconditional win for the human team.
  specials: {}
- name: target_hurt
  color: ff0000
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    dmg: 'amount of damage to deal (default: 5)'
  desc: When triggered, this hurts the entity that caused the trigger.
  specials: {}
- name: team_human_spawn
  color: 0033ff
  size_min: [-40.0, -40.0, -4.0]
  size_max: [40.0, 40.0, 4.0]
  flags: []
  props: {}
  desc: The human spawn point.
  specials: {model: models/buildables/telenode/telenode.md3}
- name: team_human_armoury
  color: 0033ff
  size_min: [-40.0, -40.0, -13.0]
  size_max: [40.0, 40.0, 50.0]
  flags: []
  props: {}
  desc: The human armoury.
  specials: {model: models/buildables/arm/arm.md3}
- name: team_human_dcc
  color: 0033ff
  size_min: [-35.0, -35.0, -13.0]
  size_max: [35.0, 35.0, 47.0]
  flags: []
  props: {}
  desc: The human defense computer.
  specials: {model: models/buildables/dcc/dcc.md3}
- name: team_human_medistat
  color: 0033ff
  size_min: [-35.0, -35.0, -7.0]
  size_max: [35.0, 35.0, 7.0]
  flags: []
  props: {}
  desc: The human medical station.
  specials: {model: models/buildables/medistat/medistat.md3}
- name: team_human_mgturret
  color: 0033ff
  size_min: [-25.0, -25.0, -20.0]
  size_max: [25.0, 25.0, 20.0]
  flags: []
  props: {}
  desc: The human machinegun turret.
  specials: {model: models/buildables/mgturret/mgturret.md3}
- name: team_human_reactor
  color: 0033ff
  size_min: [-50.0, -50.0, -15.0]
  size_max: [50.0, 50.0, 95.0]
  flags: []
  props: {}
  desc: The human reactor.
  specials: {model: models/buildables/reactor/reactor.md3}
- name: team_human_repeater
  color: 0033ff
  size_min: [-15.0, -15.0, -15.0]
  size_max: [15.0, 15.0, 25.0]
  flags: []
  props: {}
  desc: The human repeater.
  specials: {model: models/buildables/repeater/repeater.md3}
- name: team_human_tesla
  color: 0033ff
  size_min: [-22.0, -22.0, -40.0]
  size_max: [22.0, 22.0, 40.0]
  flags: []
  props: {}
  desc: The human tesla generator.
  specials: {model: models/buildables/tesla/tesla.md3}
- name: team_alien_spawn
  color: ff3300
  size_min: [-15.0, -15.0, -15.0]
  size_max: [15.0, 15.0, 15.0]
  flags: []
  props: {}
  desc: The alien spawn point.
  specials: {model: models/buildables/eggpod/eggpod.md3}
- name: team_alien_acid_tube
  color: ff3300
  size_min: [-25.0, -25.0, -25.0]
  size_max: [25.0, 25.0, 25.0]
  flags: []
  props: {}
  desc: The alien acid tube.
  specials: {model: models/buildables/acid_tube/acid_tube.md3}
- name: team_alien_barricade
  color: ff3300
  size_min: [-35.0, -35.0, -15.0]
  size_max: [35.0, 35.0, 60.0]
  flags: []
  props: {}
  desc: The alien barricade.
  specials: {model: models/buildables/barricade/barricade.md3}
- name: team_alien_booster
  color: ff3300
  size_min: [-26.0, -26.0, -9.0]
  size_max: [26.0, 26.0, 9.0]
  flags: []
  props: {}
  desc: The alien booster.
  specials: {model: models/buildables/booster/booster.md3}
- name: team_alien_hovel
  color: ff3300
  size_min: [-50.0, -50.0, -20.0]
  size_max: [50.0, 50.0, 20.0]
  flags: []
  props: {}
  desc: The alien hovel.
  specials: {model: models/buildables/hovel/hovel.md3}
- name: team_alien_overmind
  color: ff3300
  size_min: [-45.0, -45.0, -15.0]
  size_max: [45.0, 45.0, 95.0]
  flags: []
  props: {}
  desc: The alien overmind.
  specials: {model: models/buildables/overmind/overmind.md3}
- name: team_alien_trapper
  color: ff3300
  size_min: [-15.0, -15.0, -15.0]
  size_max: [15.0, 15.0, 15.0]
  flags: []
  props: {}
  desc: The alien trapper.
  specials: {model: models/buildables/trapper/trapper.md3}
- name: team_alien_hive
  color: ff3300
  size_min: [-35.0, -35.0, -25.0]
  size_max: [35.0, 35.0, 25.0]
  flags: []
  props: {}
  desc: The alien hive.
  specials: {model: models/buildables/hive/hive.md3}
- name: trigger_heal
  color: 7f7f7f
  flags:
  - START_OFF: needs to be triggered (toggle) to activate.
  - SLOW: changes the heal rate to once per second.
  props:
    heal: Health points to heal (default 5)
  desc: Any player that touches this will be healed. It does heal points of healage
    each server frame. Targeting the trigger will toggle its effects.
  specials: {}
- name: trigger_ammo
  color: 7f7f7f
  flags:
  - SLOW: changes the ammo rate to once per second.
  - NOENERGY: disables this entity for energy weapons.
  - NOCASE: disables this entity for case based weapons.
  props:
    ammo: Amount of ammo to give (default 1)
  desc: Any player that touches this will have the ammo for his held weapon restored.
    It gives ammo in chunks reflected by the key "ammo" each server frame.
  specials: {}
- name: trigger_gravity
  color: 7f7f7f
  flags: []
  props:
    NOT THROUGHLY TESTED: please report whether or not this works for you.
    gravity: The gravity within this trigger (default 800).
  desc: The gravity (for players) within this trigger is determined by the gravity
    key. Targetting this entity toggles its effects.
  specials: {}
- name: trigger_buildable
  color: 7f7f7f
  flags:
  - SPAWN_DISABLED: needs to be triggered (toggle) to activate.
  - NEGATE: negate the trigger condition.
  props:
    NOT THROUGHLY TESTED: please report whether or not this works for you.
    buildables: a comma delimited list of buildables which will trigger this entity.
    random: random time variance in seconds added or subtracted from "wait" delay
      (default 0 - see Notes).
    target: this points to the entity to activate.
    wait: time in seconds until trigger becomes re-triggerable after it's been touched
      (default 0.2, -1 = trigger once).
  desc: 'Triggered by a buildable or subset of buildables. If no buildables key is
    supplied every buildable will trigger this entity.

    Targetting this entity toggles it.'
  specials: {}
- name: trigger_class
  color: 7f7f7f
  flags:
  - SPAWN_DISABLED: needs to be triggered (toggle) to activate.
  - NEGATE: negate the trigger condition.
  props:
    NOT THROUGHLY TESTED: please report whether or not this works for you.
    classes: a comma delimited list of classes which will trigger this entity.
    random: random time variance in seconds added or subtracted from "wait" delay
      (default 0 - see Notes).
    target: this points to the entity to activate.
    wait: time in seconds until trigger becomes re-triggerable after it's been touched
      (default 0.2, -1 = trigger once).
  desc: Triggered by a specific class or subset of classes. If no classes key is supplied
    every class will trigger this entity.
  specials: {}
- name: trigger_equipment
  color: 7f7f7f
  flags:
  - SPAWN_DISABLED: needs to be triggered (toggle) to activate.
  - NEGATE: negate the trigger condition.
  props:
    NOT THROUGHLY TESTED: please report whether or not this works for you.
    equipment: a comma delimited list of equipment which will trigger this entity.
    random: random time variance in seconds added or subtracted from "wait" delay
      (default 0 - see Notes).
    target: this points to the entity to activate.
    wait: time in seconds until trigger becomes re-triggerable after it's been touched
      (default 0.2, -1 = trigger once).
  desc: 'Triggered by a player carrying some item (weapon or upgrade) or subset of
    items. If no equipment key is supplied every human will trigger this entity.

    Targetting this entity toggles it.'
  specials: {}
- name: trigger_stage
  color: 7f7f7f
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    NOT THROUGHLY TESTED: please report whether or not this works for you.
    stage: the stage at which this entity is triggered; 1 for stage 2, 2 for stage
      3
    target: this points to the entity to activate.
    team: the team which triggers this entity; 1 for aliens, 2 for humans
  desc: Fires its targets when the team key reaches stage key.
  specials: {}
- name: trigger_win
  color: 7f7f7f
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    NOT THROUGHLY TESTED: please report whether or not this works for you.
    target: this points to the entity to activate.
    team: the team which triggers this entity; 1 for aliens, 2 for humans
  desc: Fires its targets when the team key wins.
  specials: {}
- name: trigger_always
  color: 7f7f7f
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    target: this points to the entity to activate.
  desc: Automatic trigger. It will fire the entities it targets as soon as it spawns
    in the game.
  specials: {}
- name: trigger_hurt
  color: 7f7f7f
  flags:
  - START_OFF: ''
  - '-': ''
  - SILENT: supresses the sizzling sound while player is being hurt.
  - NO_PROTECTION: player will be hurt regardless of protection (see Notes).
  - SLOW: changes the damage rate to once per second.
  props:
    dmg: number of points of damage inflicted to player per server frame (default
      5 - integer values only).
  desc: 'Any player that touches this will be hurt by "dmg" points of damage once
    per server frame (very fast). A sizzling sound is also played while the player
    is being hurt.

    START_OFF needs to be triggered (toggle) for damage

    The invulnerability power-up (item_enviro) does not protect the player from damage
    caused by this entity regardless of whether the NO_PROTECTION spawnflag is set
    or not. Triggering a trigger_hurt will have no effect if the START_OFF spawnflag
    is not set. A trigger_hurt always starts on in the game.'
  specials: {}
- name: trigger_multiple
  color: 7f7f7f
  flags: []
  props:
    ? When the random key is set, its value is used to calculate a minimum and a maximum
      delay. The final time delay will be a random value anywhere between the minimum
      and maximum values
    : (min delay = wait - random) (max delay = wait + random).
    random: random time variance in seconds added or subtracted from "wait" delay
      (default 0 - see Notes).
    target: this points to the entity to activate.
    targetname: activating trigger points to this.
    wait: time in seconds until trigger becomes re-triggerable after it's been touched
      (default 0.2, -1 = trigger once).
  desc: Variable size repeatable trigger. It will fire the entities it targets when
    touched by player. Can be made to operate like a trigger_once entity by setting
    the "wait" key to -1. It can also be activated by another trigger that targets
    it.
  specials: {}
- name: trigger_push
  color: 7f7f7f
  flags: []
  props:
    target: this points to the target_position to which the player will jump.
  desc: 'This is used to create jump pads and launch ramps. It MUST point to a target_position
    or info_notnull entity to work. Unlike target_push, this is client side predicted.

    To make a jump pad or launch ramp, place the target_position/info_notnull entity
    at the highest point of the jump and target it with this entity.'
  specials: {}
- name: trigger_teleport
  color: 7f7f7f
  flags:
  - SPECTATOR: 'only spectators can use this teleport.

      Spectator teleporters are not normally placed in the editor, but are created

      automatically near doors to allow spectators to move through them'
  - SPAWN_DISABLED: ''
  props:
    target: this must point to a misc_teleporter_dest entity.
  desc: Touching this will teleport players to the location of the targeted misc_teleporter_dest
    entity. This entity allows client prediction of events.
  specials: {}
- name: worldspawn
  color: '000000'
  flags: []
  props:
    _ambient OR ambient: Adds a constant value to overall lighting. Use is not recommended.
      Ambient light will have a tendency to flatten out variations in light and shade.
    _blocksize: q3map always splits the BSP tree along the planes X=_blocksize*n and
      Y=_blocksize*n. Default _blocksize value is 1024. Increase the blocksize using
      larger powers of 2 to reduce compile times on very large maps with a low structural
      brush density.
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix. Overridable in entities.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _farplanedist: Limit on how many units the vis phase of compilation can see. Used
      in combination with level-wide fog, it can help reduce r_speeds on large, open
      maps.
    _foghull: Shader to use for "fog hull." Foghull shader should be a sky shader.
      Omit the "textures/" prefix.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _keeplights: Keep light entities in the BSP. Normally stripped out by the BSP
      process and read from the .map file by the lighting phase.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in the world. Can be overridden in func_group (or other entities) (default 1.0).
    _mingridlight: Minimum lightgrid (dynamic entity lighting) levelwide.
    _minlight: Minimum light value, levelwide. Uses the _color key to set color. Does
      not add unlike ambient.
    _minvertexlight: Minimum vertex lighting, levelwide.
    _noshadersun: Ignore q3map_sun/sun directives in sky shaders and ONLY use entity
      sun lights.
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    gridsize: granularity of the lightgrid created by q3map. Value is three integers
      separated by spaces, representing number of units between grid points in X Y
      Z. Default gridsize value is 128 128 256. Use larger powers of 2 to reduce BSP
      size and compile time on very large maps.
    reverbIntensity: '' # OK, todo:
    reverbEffect: none|generic # todo: there can be more names, but I didn't found any
    # testReverb command works on these values
    # bug: causes game to crash CM_ClipHandleToModel: bad handle -1
    humanBuildPoints: The maximum amount of power the humans can use. # bug: exist in code, but unused
    humanRepeaterBuildPoints: maximum amount of power the humans can use around each repeater # bug: exist in code, but unused
    alienBuildPoints: The maximum amount of sentience available to the overmind. # bug: exist in code, but unused
    _color: or ambientColor RGB value for ambient light color (default is 0 0 0). # todo: no visible effect
    fogColor: RGB (3 floats) # todo: no visible effect
    fogDensity: float # todo: no visible effect
    vertexremapshader: '' # todo:
    remapshader: '' # todo:
    gridsize: '' # todo:
    deluxeMapping: only possible value is 1 # todo:
    mapOverBrightBits: '' # todo:
    _q3map2_cmdline: '' # todo:
    hdrRGBE: '' # todo:
    enabledust: '' # from shader manual
    # OK:
    message: Shown above loading bar.
    music: Path/name of looping .wav or .ogg file used for level's music (eg. music/sonic5.wav)
      # bug: music doesn't loop, plays only once
    gravity: Gravity of level.
    disabledEquipment: A comma delimited list of human weapons or upgrades to disable
      for this map. (rifle,psaw,shotgun,lgun,mdriver,chaingun,flamer,prifle,lcannon,
      larmour,marmour,bsuit,radar,battpack,jetpack,gren,firebomb)
    disabledClasses: A comma delimited list of alien classes to disable for this map.
      (builder,builderupg,level0,level1,level2,level2upg,level3,level3upg,level4)
      # bug: disable classes works, but shows warnings
    disabledBuildables: A comma delimited list of buildables to disable for this map.
      (eggpod,overmind,barricade,acid_tube,trapper,booster,hive,leech,telenode,mgturret,
      tesla,arm,medistat,drill,reactor,repeater)
      # bug: disable buildables works, but shows warnings
    colorGrade: or gradingTexture - Path of color grading effect
  proptypes:
    music: string
    disabledEquipment: string
    disabledClasses: string
    disabledBuildables: string
    colorGrade: string
    gravity: float
    reverbIntensity: float
  propdefaults:
    gravity: 800
  propranges:
    reverbIntensity: [0.0, 2.0]
  propeg:
    colorGrade: gfx/cgrading/red-only
  desc: Only used for the world.
  specials: {}
#- name: ctrl_limited
  #color: '000000'
  #flags: []
  #props: {}
  #desc: ''
  #specials: {}
#- name: ctrl_relay
  #color: '000000'
  #flags:
  #- HUMANS: Can be activated by human.
  #- ALIENS: Can be activated by alien.
  #- RANDOM: 'G_FireEntityRandomly( self, activator );'
  #props:
    #wait: ''
    #delay: Old, replaced with wait.
  #desc: ''
  #specials: {}
#env_afx_ammo"
#env_afx_gravity"
#env_afx_heal"
#env_afx_hurt"
#env_afx_push"
#env_afx_teleport"
