# any InitMover has options:
# -model2 (requires origin specified)
# -light (float, default 100)
# -color (vec3_float, default 1 1 1)
# -group (deprecated team)
#
# any reset_moverspeed has options:
# -speed (float)
#
# NOT FOUND IN UNV SOURCE
# _celshader
# _cs or _castshadows
# _indexmap OR alphamap
# _layers or layers
# _lightmapscale
# _rs or _receiveshadows
#
# NOT FOUND IN q3map2 of GTKRADIANT
# _castshadows
# _receiveshadows
#
# but found: _castShadows, _receiveShadows
#
# NETRADIANT q3map2: same as gtkradiant
#
#
# TODO: add targetname for every entity that can be activated
# TODO: rename targetname -> name
# TODO: grep q3map2 for light and misc_model props/flags
# TODO: make size aliases
# TODO: make [required] mark based on src/gamelogic/game/g_spawn.c:247
# TODO: make yaml-aliased string for target
# TODO: make same colors for all entity groups
- name: worldspawn
  color: '000000'
  flags: []
  props:
    _ambient OR ambient: Adds a constant value to overall lighting. Use is not recommended.
      Ambient light will have a tendency to flatten out variations in light and shade.
    _blocksize: q3map always splits the BSP tree along the planes X=_blocksize*n and
      Y=_blocksize*n. Default _blocksize value is 1024. Increase the blocksize using
      larger powers of 2 to reduce compile times on very large maps with a low structural
      brush density.
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix. Overridable in entities.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _farplanedist: Limit on how many units the vis phase of compilation can see. Used
      in combination with level-wide fog, it can help reduce r_speeds on large, open
      maps.
    _foghull: Shader to use for "fog hull." Foghull shader should be a sky shader.
      Omit the "textures/" prefix.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _keeplights: Keep light entities in the BSP. Normally stripped out by the BSP
      process and read from the .map file by the lighting phase.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in the world. Can be overridden in func_group (or other entities) (default 1.0).
    _mingridlight: Minimum lightgrid (dynamic entity lighting) levelwide.
    _minlight: Minimum light value, levelwide. Uses the _color key to set color. Does
      not add unlike ambient.
    _minvertexlight: Minimum vertex lighting, levelwide.
    _noshadersun: Ignore q3map_sun/sun directives in sky shaders and ONLY use entity
      sun lights.
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    gridsize: granularity of the lightgrid created by q3map. Value is three integers
      separated by spaces, representing number of units between grid points in X Y
      Z. Default gridsize value is 128 128 256. Use larger powers of 2 to reduce BSP
      size and compile time on very large maps.
    reverbIntensity: '' # OK, todo:
    reverbEffect: none|generic # todo: there can be more names, but I didn't found any
    # testReverb command works on these values
    # bug: causes game to crash CM_ClipHandleToModel: bad handle -1
    humanBuildPoints: The maximum amount of power the humans can use. # bug: exist in code, but unused
    humanRepeaterBuildPoints: maximum amount of power the humans can use around each repeater # bug: exist in code, but unused
    alienBuildPoints: The maximum amount of sentience available to the overmind. # bug: exist in code, but unused
    _color: or ambientColor RGB value for ambient light color (default is 0 0 0). # todo: no visible effect
    fogColor: RGB (3 floats) # todo: no visible effect
    fogDensity: float # todo: no visible effect
    vertexremapshader: '' # todo:
    remapshader: '' # todo:
    gridsize: '' # todo:
    deluxeMapping: only possible value is 1 # todo:
    mapOverBrightBits: '' # todo:
    _q3map2_cmdline: '' # todo:
    hdrRGBE: '' # todo:
    enabledust: '' # from shader manual
    # OK:
    message: Shown above loading bar.
    music: Path/name of looping .wav or .ogg file used for level's music.
      # bug: music doesn't loop, plays only once
    gravity: Gravity of level.
    disabledEquipment: &Humanequip_list A comma delimited list of human weapons or upgrades.
      (rifle,psaw,shotgun,lgun,mdriver,chaingun,flamer,prifle,lcannon,
      larmour,marmour,bsuit,radar,battpack,jetpack,gren,firebomb)
    disabledClasses: &Alienclass_list A comma delimited list of alien classes.
      (builder,builderupg,level0,level1,level2,level2upg,level3,level3upg,level4)
      # bug: disable classes works, but shows warnings
    disabledBuildables: &Buildable_list A comma delimited list of buildables.
      (eggpod,overmind,barricade,acid_tube,trapper,booster,hive,leech,telenode,mgturret,
      tesla,arm,medistat,drill,reactor,repeater)
      # bug: disable buildables works, but shows warnings
    colorGrade: or gradingTexture - Path of color grading effect
  proptypes:
    music: string
    disabledEquipment: string
    disabledClasses: string
    disabledBuildables: string
    colorGrade: string
    gravity: float
    reverbIntensity: float
  propdefaults:
    gravity: 800
  propranges:
    reverbIntensity: [0.0, 2.0]
  propeg:
    colorGrade: gfx/cgrading/red-only
    music: music/sonic5.wav
  propreplace:
    disabledBuildables: {'of buildables': 'of buildables to disable for this map'}
    disabledEquipment: {'weapons or upgrades': 'weapons or upgrades to disable for this map'}
    disabledClasses: {'alien classes': 'alien classes to disable for this map'}
  desc: Only used for the world.
- name: light
# Marked as deprecated in code.
# src/gamelogic/game/g_spawn.c:368
# It's strange. Light is actually q3map2 workhorse.
# TODO: SP_RemoveSelf
  color: a6a6ff
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - LINEAR: Use a linear falloff. Default is inverse distance squared (more realistic). # OK
  # found in code (q3map2)
  - NOANGLE: Ignore angle attenuation.
  - DARKLIGHT: ''
  - DARKLIGHT: ''
  - NOGRIDLIGHT: Do not affect the lightgrid (dynamic entity lighting).
  props:
    # todo: source/engine/renderer/tr_bsp.cpp:5700
    light_center: '' # 3float
    light_radius: '' # 3float
    light_target: '' # 3float
    light_right: '' # 3float
    light_up: '' # 3float
    light_start: '' # 3float
    light_end: '' # 3float
    light_scale: '' # float
    texture: '' # todo:
    rotation: or light_rotation # 9float
    noshadows: only possible value 1 # bool 0/1
    noradiosity: only possible value 1 # bool 0/1
    parallel: only possible value 1 # bool 0/1
    # from q3map2
    _sun: Set this key to 1 on a spotlight to make an infinite sun light.
    _samples: '' # look in q3
    _deviance: ''
    # GtkRadiant generates useless q3map2_shader there
    style: If not default, makes wave noise shader causing whole map to blink. Values variate blink function.
    # OK:
    origin: &origin Position.
    light: Intensity.
    _color: Weighted RGB value of light color.
    _filterradius: No attenuation within _filterradius sphere.
    target: Lights pointed at a target will be spotlights.
    radius: Overrides the default 64 unit Radius of a spotlight at the target point.
    scale: >
      Scales intensity, from SOF2/JK2. Eg. light=300, scale=0.2 will result in light=60
    fade: Linear (only linear) light attenuation coefficient, less value - far the light goes.
  proptypes:
    light: float
    _color: vec3_float
    fade: float
    style: int
    scale: float
    _filterradius: float
    _deviance: float
    _samples: int
    radius: float
  propdefaults:
    light: 300
    _color: [1, 1, 1]
    fade: 1
    style: 0
    scale: 1
    _filterradius: 0
    _deviance: 0
    _samples: 1
    radius: 64
  desc: >
    Non-displayed point light source. # OK

    The -pointscale and -scale arguments to
    Q3Map2 affect the brightness of these lights. The -skyscale argument affects brightness
    of entity sun lights.
- name: lightJunior
# enlightens only weapon in hands
# TODO: property list
  color: 00b34c
  size_min: [-6.0, -6.0, -6.0]
  size_max: [6.0, 6.0, 6.0]
  flags:
  # found in code (q3map2)
  - LINEAR: Use a linear falloff. Default is inverse distance squared (more realistic).
  - NOANGLE: Ignore angle attenuation.
  - UNUSED1: ''
  - UNUSED2: ''
  - NOGRIDLIGHT: Do not affect the lightgrid (dynamic entity lighting). Setting this
      spawnflag will disable this light entirely.
  props:
    _color: weighted RGB value of light color (default white - 1.0 1.0 1.0).
    _light OR light: overrides the default 300 intensity.
    _sun: Set this key to 1 on a spotlight to make an infinite sun light.
    fade: Fades light attenuation. Only affects linear lights.
    radius: overrides the default 64 unit radius of a spotlight at the target point.
    scale: Scales light attentation, from SOF2/JK2. Scales the "light" value.
    target: Lights pointed at a target will be spotlights.
  desc: >
    Non-displayed point light source THAT ONLY AFFECTS ENTITIES (lightgrid). The
    -pointscale and -scale arguments to Q3Map2 affect the brightness of these lights.
    The -skyscale argument affects brightness of entity sun lights.
- name: func_bobbing
  color: 007fcc
  flags: # ALL OK
  - X_AXIS: Entity will bob along the X axis. # TODO: check axis again
  - Y_AXIS: Entity will bob along the Y axis. # TODO: check axis again
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    # found in code
    model: '' # todo: SetBrushModel, no effect found
    # OK
    speed: Amount of time in seconds for one complete oscillation cycle.
    height: Amount of travel of the oscillation movement.
    dmg: Damage dealt when blocked.
    # bug: parsed, but actually unused (maybe remove it?).
    # there is the line of code overrides this parameter
    # src/gamelogic/game/g_spawn_mover.c:370
    # player squashed instantly
    phase: Sets the start offset of the oscillation cycle.
    model2: &InitMover_model2 Path to custom model attached to entity. Don't forget to set origin.
    color: &SP_ConstantLightField_color Colour of emitted light.
      Emission activated by either color or light set. Don't forget to set origin.
    light: &SP_ConstantLightField_light Light emitting intensity.
      Emission activated by either color or light set. Don't forget to set origin.
    origin: &InitMover_origin Entity position point.
    group: &InitMover_group Name of entity group. Allows to activate all entities of group at once.
    noise: Sound played when activated via targetname. Emitted at origin.
    # bug: should it emit noise always, not just when activated? When activated, it's better to call
    # property "sound".
  proptypes:
    height: float
    phase: float
    light: float
    color: vec3_float
  propdefaults:
    height: 32
    phase: 0
    dmg: 2
    speed: 4
    light: 100
    color: [1, 1, 1]
  propranges:
    phase: [0, 1]
  desc: >
    Solid entity that oscillates back and forth in a linear motion. # OK
    Entity bobs on the Z axis (up-down) by default. # OK
- name: func_button
  color: 007fcc
  flags: []
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    # found in code
    model: ''
    # OK:
    target: All entities with a matching targetname will be triggered. If not set
      button will not appear.
    wait: &brush_wait Number of seconds before brush returns. -1 = return immediately.
    speed: &brush_speed Determines how fast the brush moves.
    lip: &brush_lip When 0, brush displacement = brush's size in direction of movement.
      Positive lip value discreases displacement, leaving lip remaining at the end of move.
    angle: &brush_angle 'Determines moving direction of brush (around Z axis:
      0=+x, 90=+y, 180=-x, 270=-y; special values: up = -1, down = -2).'
    health: &brush_health If set, the brush must take damage (any amount) to activate.
    model2: *InitMover_model2
    light: *SP_ConstantLightField_light
    color: *SP_ConstantLightField_color
    group: *InitMover_group
    origin: *InitMover_origin
    sound1to2: Activation sound.
  propreplace:
    speed: &Rbutt {brush: button}
    lip: *Rbutt
    angle: *Rbutt
    health: *Rbutt
    wait: {'before brush returns': 'button stays pressed'}
  proptypes:
    lip: float
    light: float
    color: vec3_float
  propdefaults:
    lip: 4
    health: false
    light: 100
    color: [1, 1, 1]
    sound1to2: sound/movers/switches/button1.wav
  boolvalues:
    health: [0, 1]
  propranges:
    angle: [-2, 360]
  propeg:
    sound1to2: 'sound/dum.ogg'
  desc: >
    When a button is touched by a player, it moves in the direction set by the
    "angle" key, triggers all its targets, stays pressed by an amount of time set
    by the "wait" key, then returns to it's original position where it can be operated
    again. # OK
- name: func_destructable
# bug: object just disappers without any explosion effect or sound.
# TODO: check toggling as target
  flags:
  # found in code
  - INDESTRUCTABLE: '' # todo: causes object to disappear. for what? (trap_LinkEntity skipped to call)
  # may be another SPAWN_DISABLED?
  color: 007fcc
  props:
    origin: '' # todo: sets restingPosition, but no noticeable difference in game (maybe it's for custom "model"?)
    angles: '' # todo: look like applies only for custom "model"
    # found in code
    model: ''
    # OK:
    health: Amount of damage needed to destroy this.
    damage: Splash damage caused when destroyed.
    radius: Splash damage radius.
    onDie: Name of the target fired when destroyed.
  proptypes:
    damage: int
    radius: int
  propdefaults:
    damage: 0
    radius: 0
    health: 100
  desc: >
    Destructable object. You can destroy this object in game. When destructed deals splash damage
    to everyone near it. Does not cause splash damage to builables. # OK
- name: func_door
  color: 007fcc
  flags: # ALL OK
  - START_OPEN: The door will spawn in the open state and operate in reverse.
  # bug: activation area placed near opened state door position, often unreachable
  - '-': ''
  - CRUSHER: &door_crusher Door will not reverse direction when blocked and will keep damaging player
      or building until it dies or gets out of the way.
    # bug: crusher door trembling when blocked
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    sound1to2: the sound played when the door, platform or button moves from state
      1 to state 2.
    sound2to1: the sound played when the door or platform moves from from state 2
      to state 1.
    soundPos1: the sound played when the door or platform reaches state 1.
    soundPos2: the sound played when the door or platform reaches state 2.
    # found in code:
    model: ''
    # OK:
    targetname: If set, a func_button or trigger is required to activate the door.
      Overrides activation by damage.
    # bug: spectator cannot go through door with targetname set
    speed: *brush_speed
    lip: *brush_lip
    angle: *brush_angle
    wait: *brush_wait
      # bug: bad -1 value, it makes annoying sound cascade (opens/closes every frame)
      # bug: confusing 0 (stands for default value)
    range: Door triggering range.
    dmg: Damage to inflict on player when he blocks operation of door.
      Door will reverse direction when blocked unless CRUSHER spawnflag is set.
      # bug: cannot set 0 dmg
    health: *brush_health
    model2: *InitMover_model2
    light: *SP_ConstantLightField_light
    color: *SP_ConstantLightField_color
    group: *InitMover_group
    origin: *InitMover_origin
  propreplace:
    speed: &Rdoor {brush: door}
    lip: *Rdoor
    angle: *Rdoor
    health: *Rdoor
  proptypes:
    range: int
    lip: float
    light: float
    color: vec3_float
  propdefaults:
    health: false
    range: 72
    lip: 8
    speed: 400
    dmg: 2
    light: 100
    color: [1, 1, 1]
  boolvalues:
    health: [0, 1]
  desc: >
    Normal sliding door entity. By default, the door will activate when player
    walks close (range) to it or when damage is inflicted (health) to it.

    Unlike in Quake 2, doors that touch are NOT automatically teamed. If you want
    doors to operate together, you have to team them manually by assigning the same
    team name to all of them. Setting the origin key is simply an alternate method
    to using an origin brush. When using the model2 key, the origin point of the model
    will correspond to the origin point defined by either the origin brush or the
    origin coordinate value.

    Target this entity with a misc_model to have the model attached to the entity
    (set the model's "target" key to the same value as this entity''s "targetname").
- name: func_door_model
  color: 007fcc
  flags: []
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    targetname: if set, a func_button or trigger is required to activate the door.
    team: assign the same team name to multiple doors that should operate together
      (see Notes).
    # found in code
    sound1to2: the sound played when the door, platform or button moves from state
      1 to state 2.
    sound2to1: the sound played when the door or platform moves from from state 2
      to state 1.
    soundPos1: the sound played when the door or platform reaches state 1.
    soundPos2: the sound played when the door or platform reaches state 2.
    wait: number of seconds before door returns (default 2)
    range: ''
    model: '' # seems to be clip model
    modelOrigin: means of setting the origin of the model.
    scale: scale the model in each of the major axes (e.g. 1.0 1.0 2.0 -- twice as
      high as normal).
    model2: 'path/name of the door model (eg: models/mapobjects/pipe/pipe02.md3).'
      # seems to be visible model
      # TODO: drops warning if not set
    noise: '' # sound
    light: *SP_ConstantLightField_light
    color: *SP_ConstantLightField_color
    angles: '' #???
    animation: The first frame and number of frames in the door open animation (e.g.
      0 10). This will be reversed for the close animation.
    speed: determines the time taken for the door to change state in msec (default
      200).
    health: (default 0) if set to any non-zero value, the door must take damage (any
      amount) to activate.
  proptypes:
    range: int
    modelOrigin: vec3_float
    scale: vec3_float
    animation: vec2_int
    light: float
    color: vec3_float
  propdefaults:
    range: 72
    wait: 2
    modelOrigin: [0, 0, 0]
    scale: [1, 1, 1]
    speed: 200
    light: 100
    color: [1, 1, 1]
    noise: ''
  desc: >
    A model based door entity. By default, the door will activate when player
    walks close to it. The opening and closing of the door is provided by an animation
    in the model itself.

    Every func_door_model needs its model to be positioned, scaled and orientated
    using the modelOrigin, scale and angle/angles keys repsectively.
- name: func_door_rotating
# maybe bug: no blocking damage.
  color: 007fcc
  flags: # ALL OK
  - START_OPEN: the door will spawn in the open state and operate in reverse.
  # bug: closes at the start of map and cannot be opened then
  - '-': ''
  - CRUSHER: *door_crusher
  # bug: crusher door trembling when blocked
  - REVERSE: the door will open the other way.
  - '-': ''
  - X_AXIS: rotate around the X axis instead of the Z. # TODO: check axis again
  - Y_AXIS: rotate around the Y axis instead of the Z. # TODO: check axis again
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    sound1to2: the sound played when the door, platform or button moves from state
      1 to state 2.
    sound2to1: the sound played when the door or platform moves from from state 2
      to state 1.
    soundPos1: the sound played when the door or platform reaches state 1.
    soundPos2: the sound played when the door or platform reaches state 2.
    # OK
    wait: *brush_wait
      # bug: bad -1 value, it makes annoying sound cascade (opens/closes every frame)
    speed: Determines how fast the door moves, in degrees/second.
    rotatorAngle: The number of degrees through which to rotate.
    health: *brush_health
    origin: Sets the rotation axis position. # TODO: check it sets .md3 position
    targetname: If set, a func_button or trigger is required to activate the door.
      # bug: if health and targetname are set, still can be activated by building explosion near it
    model2: *InitMover_model2
    light: *SP_ConstantLightField_light
    color: *SP_ConstantLightField_color
    group: *InitMover_group
    origin: *InitMover_origin
  proptypes:
    wait: float # variance not used
    rotatorAngle: float
    light: float
    color: vec3_float
  propdefaults:
    wait: 2
    rotatorAngle: 90
    health: false
    light: 100
    color: [1, 1, 1]
  propreplace:
    wait: *Rdoor
    health: *Rdoor
  boolvalues:
    health: [0, 1]
  desc: >
    Rotating door entity. By default, the door will activate when player walks
    close to it. # OK

    Rotating door will not cause damage to player when blocked. # OK

    Unlike in Quake 2, doors that touch are NOT automatically teamed. If you want
    doors to operate together, you have to team them manually by assigning the same
    team name to all of them. Setting the origin key is simply an alternate method
    to using an origin brush. When using the model2 key, the origin point of the model
    will correspond to the origin point defined by either the origin brush or the
    origin coordinate value.

    Target this entity with a misc_model to have the model attached to the entity
    (set the model''s "target" key to the same value as this entity''s "targetname").

    You need to have an origin brush as part of this entity.  The center of that brush
    will be the point around which it is rotated. It will rotate around the Z axis
    by default.  You can check either the X_AXIS or Y_AXIS box to change that.
- name: func_dynamic
# TODO: apply InitMover ?????
# TODO: apply reset_moverspeed ?????
  color: 007fcc
  flags: []
  props:
    # InitMover
    # reset_moverspeed
    model: ''
  desc: ''
- name: func_group
# TODO: SP_RemoveSelf
  color: 007fcc
  flags: []
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    alphamap: this is the path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    layers: this integer value is the number unique root shaders that will be use
      on the terrain.
    shader: this is the path to the metashader used to assign textures to the terrain
      entity.
    terrain: 'this is an on/off flag. When set to 1, the entity becomes a terrain
      entity. Note: unecessary when compiling with Q3Map2. See Q3Map2 keys.'
  desc: >
    This is not an entity as such. It is strictly an editor utility to group
    world brushes and patches together for convenience (selecting, moving, copying,
    etc). You cannot group entities with this.

    The TAB key can be used to flip through the component pieces of a selected func_group
    entity, isolating individual components. To make a func_group into a terrain entity,
    refer to the Terrain Construction documentation.
- name: func_pendulum
# bug: instakill in very big touching angle. It should just rub, not squish.
  color: 007fcc
  flags: []
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    noise: path/name of .wav file to play. Use looping sounds only (eg. sound/world/drone6.wav).
    # found:
    # OK
    speed: Angle of swing arc in either direction from initial position.
    phase: Sets the start offset of the swinging cycle.
    origin: Alternate method of setting XYZ origin of entity's rotation axis and .md3
      model included with entity.
    angle: Angle offset of axis of rotation from default X axis. Equivalent to angles = 0 a 0.
    dmg: Damage dealt when blocked.
    # bug: parsed, but actually unused (maybe remove it?).
    # there is the line of code overrides this parameter
    # src/gamelogic/game/g_spawn_mover.c:370
    # player squashed instantly
    angles: Orienting pendulum.
    targetname: &toggleable Give it a name to be able to toggle its activity.
    # bug: when signalled via button: stops and never resumes
    # bug: when stopped position resets hardly, instantly moving to origin
    model2: *InitMover_model2
    light: *SP_ConstantLightField_light
    color: *SP_ConstantLightField_color
    group: *InitMover_group
    origin: *InitMover_origin
  proptypes:
    phase: float
    light: float
    color: vec3_float
  propdefaults:
    phase: 0
    dmg: 2
    speed: 30
    origin: [0, 0, 0]
    angle: 0
    angles: [0, 0, 0]
    light: 100
    color: [1, 1, 1]
  propranges:
    phase: [0, 1]
    angle: [-180.0, 180.0]
  desc: >
    Solid entity that describes a pendulum back and forth rotation movement. Rotates
    on the X axis by default. Pendulum frequency is a physical constant based on the
    length of the beam and gravity. Blocking the pendulum instantly kills a player. # OK

    You need to have an origin brush as part of this entity. The center of that
    brush will be the point through which the rotation axis passes. Setting the
    origin key is simply an alternate method to using an origin brush. Pendulum
    will rotate along the X axis by default. Very crude operation
    pendulum cannot rotate along Z axis, the speed of swing (frequency) is not
    adjustable. When using the model2 key, the origin point of the model will correspond
    to the origin point defined by either the origin brush or the origin coordinate
    value.

    Target this entity with a misc_model to have the model attached to the entity
    (set the model's "target" key to the same value as this entity's "targetname").
- name: func_plat
# bug: when added to map raises warnings
# Warning: failed to load sound sound/movers/plats/pt1_end.wav
# Warning: failed to load sound sound/movers/plats/pt1_strt.wav
  color: 007fcc
  flags: # ALL OK
  - DONT_WAIT: The platform will not wait for a client to leave before returning to
      its original position.
  - '-': ''
  - CRUSHER: *door_crusher
  # bug: crusher door trembling when blocked
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    sound1to2: the sound played when the door, platform or button moves from state
      1 to state 2.
    sound2to1: the sound played when the door or platform moves from from state 2
      to state 1.
    soundPos1: the sound played when the door or platform reaches state 1.
    soundPos2: the sound played when the door or platform reaches state 2.
    # OK
    height: If set, this will determine the total amount of vertical travel of the
      plat. Place plat at the top point. In game it will be at bottom.
      Overrides "lip" option.
    dmg: Damage dealt when blocked.
    speed: Determines how fast the plat moves.
    lip: *brush_lip
    targetname: If set, the trigger that points to this will raise the plat each time
      it fires. The plat raises and comes back down a second later if no player is
      on it.
    model2: *InitMover_model2
    light: *SP_ConstantLightField_light
    color: *SP_ConstantLightField_color
    group: *InitMover_group
    origin: *InitMover_origin
  propreplace:
    lip: {brush: plat, 'move.': 'move. Can be overridden by "height". If you use lip
      place your plat near the bottom point.'}
  proptypes:
    lip: float
    height: float
    light: float
    color: vec3_float
  propdefaults:
    dmg: 2
    lip: 8
    height: 0
    speed: 400
    light: 100
    color: [1, 1, 1]
  desc: >
    Rising platform the player can ride to reach higher places. Plats must always
    be drawn in the raised position, so they will operate and be lighted correctly
    but they spawn in the lowered position. The plat will stay in the raised position
    until the player steps off. There are no proper sounds for this entity, only beep
    noises. It will spawn in the game and work properly but it sounds silly (see Notes).

    By default, the total amount of vertical travel of a platform is implicitly determined
    by the overall vertical size of the brushes of which it''s made minus the lip
    value. But if the "height" key is used, then the total amount of vertical travel
    of the plat will be exactly that value regardless of the shape and size of the
    plat and regardless of the value of the "lip" key. Using the "height" key is the
    best method for any kind of platforms and the only possible one for thin plats
    which need to travel vertical distances many times their own thickness. Setting
    the origin key is simply an alternate method to using an origin brush. When using
    the model2 key, the origin point of the model will correspond to the origin point
    defined by either the origin brush or the origin coordinate value.

    There is a way to make plats play proper sounds. Just create a sound\movers\plats
    folder under baseq3 and put 2 sounds named pt1_strt.wav and pt1_end.wav in it.
    Those can be the renamed sounds from the Q2 plats or renamed copies of the sound\movers\doors
    sounds you can extract from your pak0.pk3 file or new custom sounds if you're
    up to it. Thanks to Fragzilla for the tip.

    Target this entity with a misc_model to have the model attached to the entity
    (set the model's "target" key to the same value as this entity's "targetname").
- name: func_rotating
# bug: doesn't work when speed is not set
# bug: by default rotates around 0 0 0 instead of brush center
  color: 007fcc
  flags: # ALL OK
  - '-': ''
  - '-': ''
  - X_AXIS: Entity will rotate around the X axis. # TODO: check axis again
  - Y_AXIS: Entity will rotate around the Y axis. # TODO: check axis again
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    noise: path/name of .wav file to play. Use looping sounds only (eg. sound/world/drone6.wav).
    # OK
    speed: determines how fast entity rotates (default 100).
    dmg: Damage dealt when blocked.
    # bug: parsed, but not used. No damage dealt
    # bug: trembling when blocked
    model2: *InitMover_model2
    light: *SP_ConstantLightField_light
    color: *SP_ConstantLightField_color
    group: *InitMover_group
    origin: *InitMover_origin
  proptypes:
    light: float
    color: vec3_float
  propdefaults:
    speed: 400
    dmg: 2
    light: 100
    color: [1, 1, 1]
  propreplace:
    origin: {'point.': 'point. Sets the rotation axis position.'}
  desc: >
    Solid entity that rotates continuously. Rotates on the Z axis by default
    and requires an origin brush. It will always start on in the game and is not targetable.

    You need to have an origin brush as part of this entity. The center of that brush
    will be the point through which the rotation axis passes. Setting the origin key
    is simply an alternate method to using an origin brush. It will rotate along the
    Z axis by default. You can check either the X_AXIS or Y_AXIS box to change that.
    When using the model2 key, the origin point of the model will correspond to the
    origin point defined by either the origin brush or the origin coordinate value.

    Target this entity with a misc_model to have the model attached to the entity
    (set the model's "target" key to the same value as this entity's "targetname").
- name: func_spawn # todo:
  color: '007fcc'
  flags:
  # found in code
  - INITIALLY_LINKED: ''
  - DONT_KILL_BRUSH_MODEL_ON_ACT: ''
  props:
    angles: ''
    model: ''
  desc: ''
- name: func_static
# TODO: apply InitMover ?????
# TODO: apply reset_moverspeed ?????
  color: 007fcc
  flags: []
  props:
    # InitMover
    # reset_moverspeed
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    color: constantLight color of .md3 model included with entity. Has no effect on
      the entity's brushes (default 1 1 1).
    light: constantLight radius of .md3 model included with entity. Has no effect
      on the entity's brushes (default 0).
    model2: 'path/name of model to include (eg: models/mapobjects/bitch/fembotbig.md3).'
    origin: alternate method of setting XYZ origin of .md3 model included with entity
      (See Notes).
    targetname: NOT SUPPORTED BY RENDERER - if set, a func_button or trigger can make
      entity disappear from the game (See Notes).
    # found in code
    reverbEffect: ''
    reverbDistance: ''
    reverbIntensity: ''
    model: ''
    # OK
    gradingTexture: If set, there is the grading effect fluently appears when player comes closer.
    gradingDistance: Distance where grading effect appears.
  proptypes:
    gradingTexture: string
    gradingDistance: float
    reverbEffect: string
    reverbDistance: float
    reverbIntensity: float
  propdefaults:
    gradingDistance: 250
    reverbDistance: 250
    reverbIntensity: 1
  desc: >
    Static non-solid bspmodel. Can be used for conditional walls and models.
    When using the model2 key, the origin point of the model will correspond to
    the origin point defined by either the origin brush or the origin coordinate
    value. If a model is included with a targeted func_static, the brush(es) of
    the entity will be removed from the game but the .md3 model wont
    it will automatically be moved to the (0 0 0) world origin so you should NOT
    include an .md3 model to a targeted func_static.

    Target this entity with a misc_model to have the model attached to the entity
    (set the model's "target" key to the same value as this entity's "targetname").
- name: func_train
# bug: can watch through train when it pushes player
# bug: incorrect movement when activated/deactivated waiting on path_corner
  color: 007fcc
  flags: # ALL OK
  - START_OFF: The train will spawn in the off state
  - BLOCK_STOPS: Train simply stops if blocked, instead of killing.
  props:
    _celshader: 'Sets the cel shader used for this geometry. Note: omit the "textures/"
      prefix.'
    _cs OR _castshadows: Allows per-entity control over shadow casting. Defaults to
      0 on entities, 1 on world. 0 = no shadow casting. 1 = cast shadows on world.
      > 1 = cast shadows on entities with _rs (or _receiveshadows) with the corresponding
      value, AND world. Negative values imply same, but DO NOT cast shadows on world.
    _indexmap OR alphamap: Path/name for the art file used to guide the mapping of
      textures on the terrain surface.
    _layers OR layers: Integer value is the number unique root shaders that will be
      use on the terrain.
    _lightmapscale: Floating point value scaling the resolution of lightmaps on brushes/patches
      in this entity (default 1.0).
    _rs OR _receiveshadows: Allows per-entity control over shadow reception. Defaults
      to 1 on everything (world shadows). 0 = receives NO shadows. > 1 = receive shadows
      only from corresponding keyed entities (see above) and world. < 1 = receive
      shadows ONLY from corresponding keyed entities.
    _shader OR shader: 'Path to the metashader used to assign textures to the terrain
      entity. Note: Omit the "textures/" prefix.'
    # found in code
    dmg: '' # seems to be parsed but unused.
    # OK
    target: This points to the first path_corner of the path which is also
      location of the train's origin.
    origin: Required, if you omit this, train will not appear. Base position of train.
    speed: *brush_speed
    targetname: *toggleable
    model2: *InitMover_model2
    light: *SP_ConstantLightField_light
    color: *SP_ConstantLightField_color
    group: *InitMover_group
  proptypes:
    light: float
    color: vec3_float
  propdefaults:
    dmg: 2
    speed: 100
    light: 100
    color: [1, 1, 1]
  propreplace:
    speed: {brush: train, 'moves.': 'moves. Can be overridden by path_corner speed.'}
  desc: >
    Trains are moving solids that follow a string of path_corner entities. Trains
    in Tremulous are less basic than in Q3A, they also require an origin brush (see
    Notes).

    1. Trains instakill anything in their path by default.

    2. Trains cannot emit sound.

    3. When BLOCK_STOPS is set, trains cannot be stopped just by getting in their
    way, the player must be wedged between the train and another obstacle to block
    it.

    Setting the origin key is simply an alternate method to using an origin brush.
    When using the model2 key, the origin point of the model will correspond to the
    origin point defined by either the origin brush or the origin coordinate value.

    Target this entity with a misc_model to have the model attached to the entity
    (set the model's "target" key to the same value as this entity's "targetname").
- name: path_corner # OK
  color: 7f4c00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    target: Point to next path_corner in the path.
    targetname: &TN Entity name.
    wait: Number of seconds func_train will pause on path corner before moving to
      next path corner.
    speed: Speed of func_train while moving to the next path corner. This will override
      the speed value of the train.
  proptypes:
    wait: float
    # possible improvement: add usual wait variance
  propdefaults:
    wait: 0
  desc: >
    Path corner entity that func_trains can be made to follow.
- name: pos_alien_intermission # OK
  color: &alienColor ff3300
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props: &Inter_props
    origin: &Inter_pos Position.
    angles: &Inter_ang Orientation.
    target: &Inter_target Alternative way to set orientation.
    onSpawn: Name of the target fired when player comes to the intermission view.
  desc: &Inter_desc >
    Point where camera will hang when player awaits spawn as alien.
    There can be many of them, game makes random choice.
- name: info_alien_intermission
  aliasof: pos_alien_intermission
  deprecated: y
- name: pos_human_intermission # OK
  color: &humanColor 0033ff
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props: *Inter_props
  desc: *Inter_desc
  descreplace:
    'as alien': as human
- name: info_human_intermission
  aliasof: pos_human_intermission
  deprecated: y
- name: pos_player_intermission # OK
  color: ff00ff
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    origin: *Inter_pos
    angles: *Inter_ang
    target: *Inter_target
  desc: *Inter_desc
  descreplace:
    'awaits spawn as alien': is choosing team
- name: info_player_intermission
  aliasof: pos_player_intermission
  deprecated: y
- name: pos_location
  color: 007f00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    # old props
    count: color of the location text displayed in parentheses during team chat. Set
      to 0-7 for color.
    message: name of the location (text string). Displayed in parentheses in front
      of all team chat and order messages.
  desc: >
    Location marker used for team chats. The closest target_location in sight
    is used for the location. If none is in sight, the closest in distance is used.
    '0': white (default)
    '1': red
    '2': green
    '3': yellow
    '4': blue
    '5': cyan
    '6': magenta
    '7': white
- name: target_location
  aliasof: pos_location
  deprecated: y
- name: pos_player_spawn
  color: ff00ff
  flags: []
  props: {}
  desc: ''
- name: info_player_deathmatch
  aliasof: pos_player_spawn
  deprecated: y
- name: info_player_start
  aliasof: pos_player_spawn
  deprecated: y
- name: pos_target
  color: 007f00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    # old prop misc_teleporter_dest
    angle: direction in which player will look when teleported.
    # OK:
    targetname: Name of this position.
  desc: >
    Aiming target for entities like light, misc_portal_camera and trigger_push

    Used as a positional target for entities that can use directional pointing.
    A target_position can be used instead of this but was kept in Q3A for legacy purposes.

    Teleport destination location point for trigger_teleporter entities.
- name: target_position
  aliasof: pos_target
  deprecated: y
- name: info_notnull
  aliasof: pos_target
  deprecated: y
- name: misc_teleporter_dest
  aliasof: pos_target
  deprecated: y
  color: ff7f3f
  size_min: [-32.0, -32.0, -24.0]
  size_max: [32.0, 32.0, -16.0]
- name: info_null
# TODO: SP_RemoveSelf
  deprecated: y
  color: 007f00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    targetname: must match the target key of entity that uses this for pointing.
  desc: >
    Used as a positional target for light entities to create a spotlight effect.
    A target_position can be used instead of this but was kept in Q3A for legacy purposes.
- name: target_print
  deprecated: y
  color: 007f00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - HUMAN_TEAM: Only the human team players will see the message. # OK, but TODO check net game
  - ALIEN_TEAM: Only the alien team players will see the message. # OK, but TODO check net game
  - PRIVATE: Only the player that activates the target will see the message. # OK, but TODO check net game
  props:
    message: text string to print on screen. # OK
    targetname: the activating trigger points to this. # OK
  desc: >
    This will print a message on the center of the screen when triggered. # OK

    By default, all the clients will see the message.
- name: target_push
  deprecated: y
  color: 7f7f7f
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    # found in code
    angles: this sets the pitch and yaw aiming angles of push entity (default 0 0).
      The roll angle does not apply.
    speed: speed of push (default 1000). Has no effect if entity targets an aiming
      entity.
    origin: ''
    # OK
    target: This points to the aiming entity to which the player will jump.
    targetname: The activating trigger points to this. Push originates from the location
      of the trigger.
  propdefaults:
    speed: 1000
  desc: >
    This can be used to create jump pads and launch ramps. The direction of push
    can be set by the "angles" key or pointing to a target_position or info_notnull
    entity. Unlike trigger_push, this is NOT client side predicted and must be activated
    by a trigger.

    To make a jump pad or launch ramp, create a trigger_multiple where the jump must
    originate. Place the target_push directly above the trigger_multiple and place
    the target_position entity at the highest point of the jump. Target the trigger_multiple
    to the target_push and target the target_push to the target_position/info_notnull
    (or set the target_push's "angles" key). Note that the "angle" key also works.
- name: target_teleporter
  deprecated: y
  color: 007f00
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    target: this must point to a misc_teleporter_dest entity.
    targetname: activating trigger points to this.
  desc: >
    Activating this will teleport players to the location of the targeted misc_teleporter_dest
    entity. Unlike trigger_teleport, this entity must be activated by a trigger and
    does NOT allow client prediction of events.
- name: target_hurt
  deprecated: y
  color: ff0000
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    dmg: 'amount of damage to deal (default: 5)'
  desc: When triggered, this hurts the entity that caused the trigger.
- name: team_human_spawn
  color: *humanColor
  size_min: [-40.0, -40.0, -4.0]
  size_max: [40.0, 40.0, 4.0]
  flags: []
  props: {}
  desc: The human spawn point.
  specials: {model: models/buildables/telenode/telenode.md3}
- name: team_human_armoury
  color: *humanColor
  size_min: [-40.0, -40.0, -13.0]
  size_max: [40.0, 40.0, 50.0]
  flags: []
  props: {}
  desc: The human armoury.
  specials: {model: models/buildables/arm/arm.md3}
- name: team_human_drill
  color: *humanColor
  size_min: [-15.0, -15.0, -15.0]
  size_max: [15.0, 15.0, 25.0]
  flags: []
  props: {}
  desc: The human drill.
  specials: {model: models/buildables/drill/drill.md3}
- name: team_human_medistat
  color: *humanColor
  size_min: [-35.0, -35.0, -7.0]
  size_max: [35.0, 35.0, 7.0]
  flags: []
  props: {}
  desc: The human medical station.
  specials: {model: models/buildables/medistat/medistat.md3}
- name: team_human_mgturret
  color: *humanColor
  size_min: [-25.0, -25.0, -20.0]
  size_max: [25.0, 25.0, 20.0]
  flags: []
  props: {}
  desc: The human machinegun turret.
  specials: {model: models/buildables/mgturret/mgturret.md3}
- name: team_human_reactor
  color: *humanColor
  size_min: [-50.0, -50.0, -15.0]
  size_max: [50.0, 50.0, 95.0]
  flags: []
  props: {}
  desc: The human reactor.
  specials: {model: models/buildables/reactor/reactor.md3}
- name: team_human_repeater
  color: *humanColor
  size_min: [-15.0, -15.0, -15.0]
  size_max: [15.0, 15.0, 25.0]
  flags: []
  props: {}
  desc: The human repeater.
  specials: {model: models/buildables/repeater/repeater.md3}
- name: team_human_tesla
  color: *humanColor
  size_min: [-22.0, -22.0, -40.0]
  size_max: [22.0, 22.0, 40.0]
  flags: []
  props: {}
  desc: The human tesla generator.
  specials: {model: models/buildables/tesla/tesla.md3}
- name: team_alien_spawn
  color: *alienColor
  size_min: [-15.0, -15.0, -15.0]
  size_max: [15.0, 15.0, 15.0]
  flags: []
  props: {}
  desc: The alien spawn point.
  specials: {model: models/buildables/eggpod/eggpod.md3}
- name: team_alien_acid_tube
  color: *alienColor
  size_min: [-25.0, -25.0, -25.0]
  size_max: [25.0, 25.0, 25.0]
  flags: []
  props: {}
  desc: The alien acid tube.
  specials: {model: models/buildables/acid_tube/acid_tube.md3}
- name: team_alien_barricade
  color: *alienColor
  size_min: [-35.0, -35.0, -15.0]
  size_max: [35.0, 35.0, 60.0]
  flags: []
  props: {}
  desc: The alien barricade.
  specials: {model: models/buildables/barricade/barricade.md3}
- name: team_alien_booster
  color: *alienColor
  size_min: [-26.0, -26.0, -9.0]
  size_max: [26.0, 26.0, 9.0]
  flags: []
  props: {}
  desc: The alien booster.
  specials: {model: models/buildables/booster/booster.md3}
- name: team_alien_overmind
  color: *alienColor
  size_min: [-45.0, -45.0, -15.0]
  size_max: [45.0, 45.0, 95.0]
  flags: []
  props: {}
  desc: The alien overmind.
  specials: {model: models/buildables/overmind/overmind.md3}
- name: team_alien_trapper
  color: *alienColor
  size_min: [-15.0, -15.0, -15.0]
  size_max: [15.0, 15.0, 15.0]
  flags: []
  props: {}
  desc: The alien trapper.
  specials: {model: models/buildables/trapper/trapper.md3}
- name: team_alien_hive
  color: *alienColor
  size_min: [-35.0, -35.0, -25.0]
  size_max: [35.0, 35.0, 25.0]
  flags: []
  props: {}
  desc: The alien hive.
  specials: {model: models/buildables/hive/hive.md3}
- name: team_alien_leech
  color: *alienColor
  size_min: [-56.0, -40.0, -20.0]
  size_max: [56.0, 40.0, 20.0]
  flags: []
  props: {}
  desc: The alien leech.
  specials: {model: models/buildables/leech/leech.md3}
- name: ctrl_limited # OK
  color: &ctrl_color 00b3b3
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - SPAWN_DISABLED: &Spawn_disabled Disabled by default.
  # bug: no way to activate it in-game
  props:
    amount: Possible activation count.
    target: &target Name of the entity to activate.
    targetname: *TN
  propdefaults:
    amount: 1
  desc: >
    Can be triggered limited amount of times.
    Every activation fires targets.
- name: ctrl_relay # OK
  color: *ctrl_color
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  # bug: can't enable entity later in game, remove spawn_disabled at all?
  props:
    onAct: &relay_target Name of the target to activate.
    targetname: *TN
    wait: &relay_wait Delay before target activation.
  propdefaults:
    wait: 0
  desc: &relay_desc >
    When activated waits amount of time then activates its own targets.
- name: target_relay # OK
  aliasof: ctrl_relay
  deprecated: y
  flags: &target_relay_flags
  - ONLY_HUMANS: Can be activated only by a human.
  - ONLY_ALIENS: Can be activated only by an alien.
  - RANDOM: Ignore delay, activate random target.
  props:
    target: *relay_target
    targetname: *TN
    wait: *relay_wait
  propdefaults:
    wait: 0
- name: target_delay # OK
  aliasof: ctrl_relay
  deprecated: y
  flags: *target_relay_flags
  props:
    target: *relay_target
    targetname: *TN
    wait: *relay_wait
  propdefaults:
    wait: 1
- name: env_afx_ammo # OK
  color: 5b7c2d
  flags:
  - EVERY_SECOND: Act every second instead of every frame.
  - DISABLE_ENERGO: Disable recharging energetic weapons.
  - DISABLE_NON_ENERGO: Disable recharging non-energetic weapons.
  props:
    ammo: Amount of ammo. Values < 1 corrected to 1.
    targetname: *toggleable
  proptypes:
    ammo: int
  propdefaults:
    ammo: 1
  desc: &game_desc Gives funds to the player who activates it (e.g. via button).
  descreplace:
    funds: ammo
- name: trigger_ammo
  aliasof: env_afx_ammo
  deprecated: y
- name: env_afx_gravity # OK
# bug: local negative (<0) gravity fights with level gravity causing player to tremble
  color: 7f7f7f
  flags: []
  props:
    amount: The gravity within this entity.
    targetname: *toggleable
  propdefaults:
    amount: 800
  desc: Area with different gravity within.
- name: trigger_gravity
  aliasof: env_afx_gravity
  deprecated: y
- name: env_afx_heal # OK
  color: 2d7c50
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  - EVERY_SECOND: Heal every second instead of every frame.
  props:
    heal: Amount of heal. Values < 1 corrected to 1.
    targetname: *toggleable
  proptypes:
    heal: int
  propdefaults:
    heal: 5
  desc: Heals players touching entity.
- name: trigger_heal
  aliasof: env_afx_heal
  deprecated: y
- name: env_afx_hurt # OK
# bug: can't customize sound
# it is always sound/misc/electro.wav
  color: c81111
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  - '-': ''
  - NO_SOUND: No sound played.
  - NO_PROTECTION: Player will be hurt regardless of protection (e.g. invulnerability power-up).
  # bug: this flag intended for invulnerability quake power-up, is it actual in unv? for now it's no-effect
  - EVERY_SECOND: Damage every second instead of every frame.
  props:
    dmg: Damage dealt. Values <= 0 corrected to default value.
    targetname: *toggleable
  propdefaults:
    dmg: 5
  desc: Hurts players or buildings touching entity.
- name: trigger_hurt
  aliasof: env_afx_hurt
  deprecated: y
- name: env_afx_push # OK
  color: 7f7f7f
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  props:
    target: Name of the aiming position entity to which the player will jump.
      This is the highest point of the jump.
    targetname: *toggleable
    wait: Delay between triggerings.
  propdefaults:
    wait: [0.5, 0]
  desc: >
    This is used to create jump pads and launch ramps.
- name: trigger_push
  aliasof: env_afx_push
  deprecated: y
- name: env_afx_teleport # OK
# bug: stepping into disabled teleport continuously shows flashing screen effect.
  color: '754928'
  flags:
  - SPECTATORS_ONLY: >
      Affect only spectators.
      Spectator teleporters are not normally placed in the editor, but are created
      automatically near doors to allow spectators to move through them.
  - SPAWN_DISABLED: Teleport disabled by default.
  props:
    target: Name of the target point. You can set same targetname to many positions, they will be
      chosen randomly.
    speed: Player speed after teleportation.
    targetname: *toggleable
  propdefaults:
    speed: 400
  desc: >
    Teleports player touching entity.

    Set "angles" property of target to define player direction after teleportation.
- name: trigger_teleport
  aliasof: env_afx_teleport
  deprecated: y
- name: fx_rumble
  color: ff0000
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    # old props
    count: 'duration of the quake (default: 10)'
    speed: 'severity of the quake (default: 100)'
  desc: >
    When triggered, this initiates a level-wide rumble effect. All players are affected.
- name: target_rumble
  aliasof: fx_rumble
  deprecated: y
- name: game_end # OK
# improvement: make it able to end game in draw with team=0 or omitted
  color: &game_color ff0000
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    team: &Team_number 1 for aliens, 2 for humans.
    targetname: *TN
  desc: When triggered, this causes an unconditional win for the team.
- name: target_alien_win # OK
  aliasof: game_end
  deprecated: y
  color: *alienColor
  props:
    targetname: *TN
  proptypes: {}
  descreplace: {'the team': 'the alien team'}
- name: target_human_win # OK
  aliasof: game_end
  deprecated: y
  color: *humanColor
  props:
    targetname: *TN
  proptypes: {}
  descreplace: {'the team': 'the human team'}
- name: game_funds # OK
  color: *game_color
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    amount: Amount of funds. 1 = 1 credit = 0.01 evo.
    targetname: *TN
  propdefaults:
    amount: 0
  desc: *game_desc
- name: game_kill # OK
  color: *game_color
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    targetname: *TN
  desc: *game_desc
  descreplace:
    'Gives funds to': 'Instantly kills'
- name: target_kill
  aliasof: game_kill
  deprecated: y
- name: game_score # OK
# possible improvement: measure amount directly in score points
  color: *game_color
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    amount: Amount of score points. 50 = 1 score, calculated as quantity of funds
      game gives you when you earn amount of score.
    targetname: *TN
  propdefaults:
    amount: 1
  desc: *game_desc
  descreplace:
    'funds': 'score points'
- name: target_score
  aliasof: game_score
  deprecated: y
- name: gfx_animated_model # OK
  color: &gfx_animated_model_color ff7f3f
  size_min: [-12.0, -12.0, -12.0]
  size_max: [12.0, 12.0, 12.0]
  flags:
  - TOGGLE_VISIBILITY: Toggle entity visibility instead of animation.
  - SPAWN_STOPPED: Spawn with animation stopped.
  props:
    model: Path to a model.
    animation: >
      The guts of the entity. This is identical to an entry in an animation.cfg
      - Start Frame, Number of frames, Looping Frames, Frame rate.
    angles: Orientation.
    radius: The scale of the model compared to its original size.
    targetname: *toggleable
  proptypes:
    radius: float
  propdefaults:
    radius: 1
  propeg:
    model: 'models/mapobjects/teleporter/teleporter.md3'
    animation: [0, 30, 30, 20]
  desc: >
    Animated model entity. Not baked info level geometry.
    Can be walked through.
- name: misc_anim_model
  aliasof: gfx_animated_model
  deprecated: y
- name: misc_model
  deprecated: y
  color: *gfx_animated_model_color
  size_min: [-12.0, -12.0, -12.0]
  size_max: [12.0, 12.0, 12.0]
  flags: []
  props:
    # OK
    origin: *origin
    model: Path to a custom model.
    _frame: Animation frame to pick. This differs from gfx_animated_model.animation!
  proptypes:
    _frame: int
  propeg:
    _frame: 5
  desc: > # OK
    Static model baked into level geometry by q3map2.
    Can be walked through. Not animated, but you can choose one of the frames.
- name: gfx_light_flare
  color: a6a6ff
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: # ALL OK
  - SPAWN_DISABLED: *Spawn_disabled
  props:
    # old props
    angles: This reflects which direction the flare points. It is not important unless
      the second component of the radius key is employed. angles is a vector of PITCH
      YAW ROLL. For example a value of "90 0 0" would create a flare pointing down.
      ROLL is redundant in this context and can be set arbitrarily.
    radius: 'The radius key is a vector.

      The first component is the size of the light flare. The radius is calculated
      by taking the distance of the viewer from the light flare and dividing by this
      key, so the larger the key value, the smaller the flare. Values between 2 and
      10 are sensible. # OK

      The second component indicates the angle around the direction the flare points
      for which it is visible. For example a value of 90 means that you can see the
      flare while infront of the entity, but not when behind it. If set to zero the
      light flare will be visible from any angle

      The third component is similar to the first except that it specifies the size
      of the light source rather than the size of the light flare itself. This is
      useful when the higher detail flare fading modes are enabled. If this is set
      to the same value as the first component, fading will commence as soon as the
      edge of the light flare is occluded by some surface between the viewer and the
      flare. If it is set larger the flare will overlap the occluding surface before
      it begins to fade.'
    targetShaderName: The name of the shader of the light flare.
    # found in code
    mindist: ''
    speed: ''
    shader: '' # or targetShaderName
    origin: ''
    #radius: ''
    #angles: ''
    # TODO: merge with misc_light_flare
  proptypes:
    mindist: int
  propdefaults:
    mindist: 0
    speed: 200
  desc: >
    A light flare entity.

    Triggering this entity toggles it.
- name: misc_light_flare
  aliasof: gfx_light_flare
  deprecated: y
- name: gfx_particle_system
# bug: if player toggles entity twice quickly (->ON->OFF),
# after "wait" delay it toggles once again (->ON)
# and becomes constantly visible
  color: ff7f3f
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: # ALL OK
  - SPAWN_DISABLED: *Spawn_disabled
  props:
    # found in code
    angles: ''
    # OK
    psName: >
      Name of particle system.
      Look at scripts/*.particle, you need the name residing inside of these files.
    wait: Wait after toggle, then toggle again. Disabled if value <= 0.
    targetname: *TN
    origin: Position.
  proptypes:
    psName: string
    wait: float # variance not used
  propdefaults:
    psName: ''
  propeg:
    psName: firebomb_subPS
  desc: >
    Particle system entity.

    Setting this as target allows to toggle its activity. # OK
- name: misc_particle_system
  aliasof: gfx_particle_system
  deprecated: y
- name: gfx_portal_camera
  color: ff7f3f
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  # found in code
  - FRAME25: Slow rotation.
  - FRAME75: Fast rotation.
  - NO_ROTATION: ''
  props:
    # old props
    angles: this sets the pitch and yaw aiming angles of the portal camera (default
      0 0). Use "roll" key to set roll angle.
    roll: roll angle of camera. A value of 0 is upside down and 180 is the same as
      the player's view.
    target: point this to a target_position entity to set the camera's pointing direction.
    targetname: a misc_portal_surface portal surface indicator must point to this.
  desc: >
    Portal camera. This camera is used to project its view onto a portal surface
    in the level through the intermediary of a misc_portal_surface entity. Use the
    "angles" key or target a target_position or info_notnull entity to set the camera''s
    pointing direction.

    Both the setting "angles" key or "targeting a target_position" methods can be
    used to aim the camera. However, the target_position method is simpler. In both
    cases, the "roll" key must be used to set the roll angle. If either the SLOWROTATE
    or FASTROTATE spawnflag is set, then the "roll" value is irrelevant.
- name: misc_portal_camera
  aliasof: gfx_portal_camera
  deprecated: y
- name: gfx_portal_surface
  color: ff7f3f
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    # old props
    target: point this to a misc_portal_camera that "sees" the view you want to display
      on the portal.
  desc:
    Portal surface indicator. This will "lock on" the brush face closest to it
    and identify as a portal. The view displayed on the portal surface is the view
    of the misc_portal_camera that this entity targets. Also used for mirrors (see
    Notes).

    The entity must be no farther than 64 units away from the portal surface to lock
    onto it. To make a mirror, apply the common/mirror shader to the surface, place
    this entity near it but don't target a misc_portal_camera.
- name: misc_portal_surface
  aliasof: gfx_portal_surface
  deprecated: y
- name: gfx_shader_mod
  color: '000000'
  flags: []
  props: {}
  desc: ''
- name: sensor_buildable # OK
  color: &sensor_color 43aa00
  flags: &Some_sensors_flags
  - SPAWN_DISABLED: *Spawn_disabled
  - NEGATE: Negate sensor condition.
  props:
    wait: &sensor_wait Time in seconds until trigger becomes re-triggerable after it's been touched.
    target: *target
    buildables: *Buildable_list
    targetname: *toggleable
  propdefaults:
    wait: [0.5, 0]
  propreplace:
    buildables:
      'of buildables.': 'of buildables which will trigger this entity. If omitted matches all buildables.'
  desc: >
    Triggered by a buildable or subset of buildables.

    If condition is satisfied fires targets continuously with "wait" period.

    If NEGATE used, sensor still needs to be touched to activate.
- name: trigger_buildable
  aliasof: sensor_buildable
  deprecated: y
- name: sensor_creep # OK
# bug: cannot be toggled via targetname
# possible improvement: "wait" triggering delay same as trigger_buildable
  color: *sensor_color
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  props:
    target: *target
  desc: >
    Detects creep, i.e. area where the building is allowed.

    If condition is satisfied fires targets continuously.
- name: sensor_end # OK
  color: *sensor_color
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: *Some_sensors_flags
  props:
    target: *target
    team: *Team_number
    targetname: *toggleable
  propreplace:
    team: {'humans.': 'humans. 0 or omit to detect draw.'}
  desc: >
    Fires its targets when the team wins.
- name: trigger_win
  aliasof: sensor_end
  deprecated: y
- name: sensor_player # OK
# bug: doesn't fire with minimum set of properties (target)
# src/gamelogic/game/g_spawn_sensor.c:492 - set qtrue there?
  color: *sensor_color
  flags: *Some_sensors_flags
  props:
    equipment: *Humanequip_list
    targetname: *toggleable
    wait: *sensor_wait
    team: *Team_number
    target: *target
    classes: *Alienclass_list
  propdefaults:
    wait: [0.5, 0]
  propreplace:
    team: {'humans.': 'humans. Omit if you don''t want to check the team. Not affected by NEGATE.'}
    classes: {'alien classes': 'alien classes which will trigger this entity'}
    equipment: {'weapons or upgrades': 'weapons or upgrades which will trigger this entity'}
  desc: >
    Triggered by a specific class or subset of classes. If no classes key is supplied
    every class will trigger this entity.

    Triggered by a player carrying some item (weapon or upgrade) or subset of
    items. If no equipment key is supplied every human will trigger this entity.
- name: trigger_class
  aliasof: sensor_player
  deprecated: y
- name: trigger_equipment
  aliasof: sensor_player
  deprecated: y
- name: trigger_multiple # OK
  aliasof: sensor_player
  deprecated: y
  color: *sensor_color
  flags:
  - HUMANS: Activated by humans.
  - ALIENS: Activated by aliens.
  props:
    wait: *sensor_wait
    targetname: Can also be triggered as target.
    target: *target
  propreplace: {}
  desc: >
    Triggered by a player.
- name: sensor_power # OK
# bug: sensor never triggers
# src/gamelogic/game/g_spawn_sensor.c:590
  color: *sensor_color
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  props: {}
  desc: ''
- name: sensor_stage # OK
# possible improvement: detect substages, stages down
  color: *sensor_color
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: *Some_sensors_flags
  props:
    target: *target
    targetname: *toggleable
    stage: &sensor_stage_stage The stage at which this entity is triggered. 2nd stage is 1, 3rd is 2.
    team: *Team_number
  propreplace:
    team: {'humans.': 'humans. Omit if you don''t want to check the team.'}
  desc: >
    Triggers when the team reaches the stage. Stage down doesn't trigger.
- name: trigger_stage # OK
  aliasof: sensor_stage
  deprecated: y
  props:
    target: *target
    targetname: Can also be triggered as target.
    stage: *sensor_stage_stage
    team: *Team_number
- name: sensor_start # OK
  color: *sensor_color
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags: []
  props:
    target: *target
  desc: >
    Fires the targets at game start.
- name: trigger_always
  aliasof: sensor_start
  deprecated: y
- name: sensor_support # OK
# bug: cannot be toggled via targetname
# bug: remove this entity? there is a sensor_creep already
  color: *sensor_color
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - SPAWN_DISABLED: *Spawn_disabled
  props:
    team: The only valuable value is 1, i.e. aliens. Make sure you set this.
      # bug: remove this property?
    target: *target
  desc: >
    Detects creep, i.e. area where the building is allowed.

    If condition is satisfied fires targets continuously.
- name: sensor_timer # OK
  color: *sensor_color
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - START_ON: Timer will start on in the game and continuously fire its targets.
  props:
    wait: Delay in seconds between each triggering of its targets.
    target: *target
    targetname: *toggleable
  desc: >
    Entity continuously fires its targets after a preset time delay.
- name: func_timer
# maybe bug: not marked as deprecated in source code
  aliasof: sensor_timer
- name: sfx_speaker
  color: 00b3b3
  size_min: [-8.0, -8.0, -8.0]
  size_max: [8.0, 8.0, 8.0]
  flags:
  - PRESTARTED_LOOP: Same as LOOP, but speaker is active by default. # OK
  - LOOP: Makes infinite loop. Can be toggled via targetname. # OK
  - BROADCAST: Makes sound global, sound volume is maximal everywhere on map. Doesn't work with LOOPs. # OK
  - ACTIVATOR_SPEAKER: looks like it plays sound only for person who activated it # found in code, TODO
  props:
    # old props
    #wait: delay in seconds between each time the sound is played ("random" key must
    #  be set - see Notes).
    # found in code
    wait: ''
    # OK
    origin: Position.
    noise: Path to played sound.
    targetname: *TN
  propdefaults:
    noise: NOSOUND
  propeg:
    noise: 'sound/noise.wav'
  desc: >
    Sound generating entity that plays .wav files. Normal non-looping sounds
    play each time the target_speaker is triggered. Looping sounds can be set to play
    by themselves (no activating trigger) or be toggled on/off by a trigger.

    The path portion value of the "noise" key can be replaced by the implicit folder
    character "*" for triggered sounds that belong to a particular player model. For
    example, if you want to create a "bottomless pit" in which the player screams
    and dies when he falls into, you would place a trigger_multiple over the floor
    of the pit and target a target_speaker with it. Then, you would set the "noise"
    key to "*falling1.wav". The * character means the current player model's sound
    folder. So if your current player model is Visor, * = sound/player/visor, if your
    current player model is Sarge, * = sound/player/sarge, etc. This cool feature
    provides an excellent way to create "player-specific" triggered sounds in your
    levels.

    The combination of the "wait" and "random" keys can be used to play non-looping
    sounds without requiring an activating trigger but both keys must be used together.
    The value of the "random" key is used to calculate a minimum and a maximum delay.
    The final time delay will be a random value anywhere between the minimum and
    maximum values: (min delay = wait - random) (max delay = wait + random).
- name: target_speaker
  aliasof: sfx_speaker
  deprecated: y
